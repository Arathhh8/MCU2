
UART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000da4  08000da4  00010da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dcc  08000dcc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000dcc  08000dcc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dcc  08000dcc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dcc  08000dcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dd0  08000dd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000010  08000de4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000de4  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066e6  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001138  00000000  00000000  0002671f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a0  00000000  00000000  00027858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00027df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016520  00000000  00000000  00028330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e10  00000000  00000000  0003e850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080e56  00000000  00000000  00045660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c64b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001588  00000000  00000000  000c6508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08000d8c 	.word	0x08000d8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08000d8c 	.word	0x08000d8c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SysTick_Handler>:
 */

#include "main_app.h"
#include "stm32f1xx_hal.h"

void SysTick_Handler (void){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8000160:	f000 f934 	bl	80003cc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000164:	f000 fa5b 	bl	800061e <HAL_SYSTICK_IRQHandler>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}

0800016c <main>:

UART_HandleTypeDef huart2;

char *user_data = "The application is running\r\n";

int main(void){
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0

	HAL_Init();
 8000172:	f000 f8e5 	bl	8000340 <HAL_Init>
	SystemClockConfig();
 8000176:	f000 f817 	bl	80001a8 <SystemClockConfig>
	UART2_Init(); // high level peripheral initialization
 800017a:	f000 f81b 	bl	80001b4 <UART2_Init>

	uint16_t len_of_data = strlen(user_data);
 800017e:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <main+0x34>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4618      	mov	r0, r3
 8000184:	f7ff ffe2 	bl	800014c <strlen>
 8000188:	4603      	mov	r3, r0
 800018a:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&huart2, (uint8_t*)user_data, len_of_data, HAL_MAX_DELAY);
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <main+0x34>)
 800018e:	6819      	ldr	r1, [r3, #0]
 8000190:	88fa      	ldrh	r2, [r7, #6]
 8000192:	f04f 33ff 	mov.w	r3, #4294967295
 8000196:	4803      	ldr	r0, [pc, #12]	; (80001a4 <main+0x38>)
 8000198:	f000 fc54 	bl	8000a44 <HAL_UART_Transmit>

	while(1);
 800019c:	e7fe      	b.n	800019c <main+0x30>
 800019e:	bf00      	nop
 80001a0:	20000000 	.word	0x20000000
 80001a4:	2000002c 	.word	0x2000002c

080001a8 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(void){
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0


}
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <UART2_Init>:


void UART2_Init(void){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80001b8:	4b0f      	ldr	r3, [pc, #60]	; (80001f8 <UART2_Init+0x44>)
 80001ba:	4a10      	ldr	r2, [pc, #64]	; (80001fc <UART2_Init+0x48>)
 80001bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80001be:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <UART2_Init+0x44>)
 80001c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80001c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80001c6:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <UART2_Init+0x44>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <UART2_Init+0x44>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <UART2_Init+0x44>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <UART2_Init+0x44>)
 80001da:	2200      	movs	r2, #0
 80001dc:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <UART2_Init+0x44>)
 80001e0:	220c      	movs	r2, #12
 80001e2:	615a      	str	r2, [r3, #20]
	if( HAL_UART_Init(&huart2) != HAL_OK ){
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <UART2_Init+0x44>)
 80001e6:	f000 fbdd 	bl	80009a4 <HAL_UART_Init>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <UART2_Init+0x40>
		// There is a problem
		Error_handler();
 80001f0:	f000 f806 	bl	8000200 <Error_handler>
	}

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	2000002c 	.word	0x2000002c
 80001fc:	40004400 	.word	0x40004400

08000200 <Error_handler>:

void Error_handler(void){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0

	while(1);
 8000204:	e7fe      	b.n	8000204 <Error_handler+0x4>
	...

08000208 <HAL_MspInit>:
 */

#include "stm32f1xx_hal.h"

void HAL_MspInit(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  // Here we will do low level processor specific initis

	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); // this is actually no required because this config is by default
 800020c:	2003      	movs	r0, #3
 800020e:	f000 f9c5 	bl	800059c <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; // enable usage fault, memory fault and bus fault system exeptions
 8000212:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <HAL_MspInit+0x40>)
 8000214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000216:	4a0c      	ldr	r2, [pc, #48]	; (8000248 <HAL_MspInit+0x40>)
 8000218:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800021c:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800021e:	2200      	movs	r2, #0
 8000220:	2100      	movs	r1, #0
 8000222:	f06f 000b 	mvn.w	r0, #11
 8000226:	f000 f9c4 	bl	80005b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800022a:	2200      	movs	r2, #0
 800022c:	2100      	movs	r1, #0
 800022e:	f06f 000a 	mvn.w	r0, #10
 8000232:	f000 f9be 	bl	80005b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000236:	2200      	movs	r2, #0
 8000238:	2100      	movs	r1, #0
 800023a:	f06f 0009 	mvn.w	r0, #9
 800023e:	f000 f9b8 	bl	80005b2 <HAL_NVIC_SetPriority>

}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800024c:	b580      	push	{r7, lr}
 800024e:	b08a      	sub	sp, #40	; 0x28
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	// here we are going to do the low level inits. of the USART2 peripheral

	// 1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_AFIO_CLK_ENABLE();
 8000254:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <HAL_UART_MspInit+0x94>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <HAL_UART_MspInit+0x94>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <HAL_UART_MspInit+0x94>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	617b      	str	r3, [r7, #20]
 800026a:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART2_CLK_ENABLE();
 800026c:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <HAL_UART_MspInit+0x94>)
 800026e:	69db      	ldr	r3, [r3, #28]
 8000270:	4a1b      	ldr	r2, [pc, #108]	; (80002e0 <HAL_UART_MspInit+0x94>)
 8000272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000276:	61d3      	str	r3, [r2, #28]
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <HAL_UART_MspInit+0x94>)
 800027a:	69db      	ldr	r3, [r3, #28]
 800027c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000280:	613b      	str	r3, [r7, #16]
 8000282:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <HAL_UART_MspInit+0x94>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <HAL_UART_MspInit+0x94>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <HAL_UART_MspInit+0x94>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	68fb      	ldr	r3, [r7, #12]

	// 2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; // UART2_TX
 800029c:	2304      	movs	r3, #4
 800029e:	61bb      	str	r3, [r7, #24]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80002a0:	2302      	movs	r3, #2
 80002a2:	61fb      	str	r3, [r7, #28]
	gpio_uart.Pull = GPIO_PULLUP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	623b      	str	r3, [r7, #32]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80002a8:	2302      	movs	r3, #2
 80002aa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4619      	mov	r1, r3
 80002b2:	480c      	ldr	r0, [pc, #48]	; (80002e4 <HAL_UART_MspInit+0x98>)
 80002b4:	f000 f9c0 	bl	8000638 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;	// UART_RX
 80002b8:	2308      	movs	r3, #8
 80002ba:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80002bc:	f107 0318 	add.w	r3, r7, #24
 80002c0:	4619      	mov	r1, r3
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <HAL_UART_MspInit+0x98>)
 80002c4:	f000 f9b8 	bl	8000638 <HAL_GPIO_Init>



	// 3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80002c8:	2026      	movs	r0, #38	; 0x26
 80002ca:	f000 f98e 	bl	80005ea <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80002ce:	2200      	movs	r2, #0
 80002d0:	210f      	movs	r1, #15
 80002d2:	2026      	movs	r0, #38	; 0x26
 80002d4:	f000 f96d 	bl	80005b2 <HAL_NVIC_SetPriority>
}
 80002d8:	bf00      	nop
 80002da:	3728      	adds	r7, #40	; 0x28
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010800 	.word	0x40010800

080002e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002f4:	f7ff fff8 	bl	80002e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002fa:	490c      	ldr	r1, [pc, #48]	; (800032c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80002fc:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <LoopFillZerobss+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a09      	ldr	r2, [pc, #36]	; (8000334 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000310:	4c09      	ldr	r4, [pc, #36]	; (8000338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800031e:	f000 fd11 	bl	8000d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ff23 	bl	800016c <main>
  bx lr
 8000326:	4770      	bx	lr
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000330:	08000dd4 	.word	0x08000dd4
  ldr r2, =_sbss
 8000334:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000338:	20000078 	.word	0x20000078

0800033c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC1_2_IRQHandler>
	...

08000340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <HAL_Init+0x28>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a07      	ldr	r2, [pc, #28]	; (8000368 <HAL_Init+0x28>)
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000350:	2003      	movs	r0, #3
 8000352:	f000 f923 	bl	800059c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000356:	200f      	movs	r0, #15
 8000358:	f000 f808 	bl	800036c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800035c:	f7ff ff54 	bl	8000208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000360:	2300      	movs	r3, #0
}
 8000362:	4618      	mov	r0, r3
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40022000 	.word	0x40022000

0800036c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <HAL_InitTick+0x54>)
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <HAL_InitTick+0x58>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4619      	mov	r1, r3
 800037e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000382:	fbb3 f3f1 	udiv	r3, r3, r1
 8000386:	fbb2 f3f3 	udiv	r3, r2, r3
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f93b 	bl	8000606 <HAL_SYSTICK_Config>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000396:	2301      	movs	r3, #1
 8000398:	e00e      	b.n	80003b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2b0f      	cmp	r3, #15
 800039e:	d80a      	bhi.n	80003b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003a0:	2200      	movs	r2, #0
 80003a2:	6879      	ldr	r1, [r7, #4]
 80003a4:	f04f 30ff 	mov.w	r0, #4294967295
 80003a8:	f000 f903 	bl	80005b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003ac:	4a06      	ldr	r2, [pc, #24]	; (80003c8 <HAL_InitTick+0x5c>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003b2:	2300      	movs	r3, #0
 80003b4:	e000      	b.n	80003b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003b6:	2301      	movs	r3, #1
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000004 	.word	0x20000004
 80003c4:	2000000c 	.word	0x2000000c
 80003c8:	20000008 	.word	0x20000008

080003cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <HAL_IncTick+0x1c>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <HAL_IncTick+0x20>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4413      	add	r3, r2
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_IncTick+0x20>)
 80003de:	6013      	str	r3, [r2, #0]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	2000000c 	.word	0x2000000c
 80003ec:	20000074 	.word	0x20000074

080003f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  return uwTick;
 80003f4:	4b02      	ldr	r3, [pc, #8]	; (8000400 <HAL_GetTick+0x10>)
 80003f6:	681b      	ldr	r3, [r3, #0]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	20000074 	.word	0x20000074

08000404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <__NVIC_SetPriorityGrouping+0x44>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000420:	4013      	ands	r3, r2
 8000422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800042c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000436:	4a04      	ldr	r2, [pc, #16]	; (8000448 <__NVIC_SetPriorityGrouping+0x44>)
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	60d3      	str	r3, [r2, #12]
}
 800043c:	bf00      	nop
 800043e:	3714      	adds	r7, #20
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <__NVIC_GetPriorityGrouping+0x18>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	f003 0307 	and.w	r3, r3, #7
}
 800045a:	4618      	mov	r0, r3
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000476:	2b00      	cmp	r3, #0
 8000478:	db0b      	blt.n	8000492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f003 021f 	and.w	r2, r3, #31
 8000480:	4906      	ldr	r1, [pc, #24]	; (800049c <__NVIC_EnableIRQ+0x34>)
 8000482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000486:	095b      	lsrs	r3, r3, #5
 8000488:	2001      	movs	r0, #1
 800048a:	fa00 f202 	lsl.w	r2, r0, r2
 800048e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	e000e100 	.word	0xe000e100

080004a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	db0a      	blt.n	80004ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	490c      	ldr	r1, [pc, #48]	; (80004ec <__NVIC_SetPriority+0x4c>)
 80004ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004be:	0112      	lsls	r2, r2, #4
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	440b      	add	r3, r1
 80004c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004c8:	e00a      	b.n	80004e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4908      	ldr	r1, [pc, #32]	; (80004f0 <__NVIC_SetPriority+0x50>)
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	3b04      	subs	r3, #4
 80004d8:	0112      	lsls	r2, r2, #4
 80004da:	b2d2      	uxtb	r2, r2
 80004dc:	440b      	add	r3, r1
 80004de:	761a      	strb	r2, [r3, #24]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000e100 	.word	0xe000e100
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b089      	sub	sp, #36	; 0x24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f003 0307 	and.w	r3, r3, #7
 8000506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000508:	69fb      	ldr	r3, [r7, #28]
 800050a:	f1c3 0307 	rsb	r3, r3, #7
 800050e:	2b04      	cmp	r3, #4
 8000510:	bf28      	it	cs
 8000512:	2304      	movcs	r3, #4
 8000514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	3304      	adds	r3, #4
 800051a:	2b06      	cmp	r3, #6
 800051c:	d902      	bls.n	8000524 <NVIC_EncodePriority+0x30>
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	3b03      	subs	r3, #3
 8000522:	e000      	b.n	8000526 <NVIC_EncodePriority+0x32>
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000528:	f04f 32ff 	mov.w	r2, #4294967295
 800052c:	69bb      	ldr	r3, [r7, #24]
 800052e:	fa02 f303 	lsl.w	r3, r2, r3
 8000532:	43da      	mvns	r2, r3
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	401a      	ands	r2, r3
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800053c:	f04f 31ff 	mov.w	r1, #4294967295
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	43d9      	mvns	r1, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800054c:	4313      	orrs	r3, r2
         );
}
 800054e:	4618      	mov	r0, r3
 8000550:	3724      	adds	r7, #36	; 0x24
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3b01      	subs	r3, #1
 8000564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000568:	d301      	bcc.n	800056e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800056a:	2301      	movs	r3, #1
 800056c:	e00f      	b.n	800058e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <SysTick_Config+0x40>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3b01      	subs	r3, #1
 8000574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000576:	210f      	movs	r1, #15
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f7ff ff90 	bl	80004a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <SysTick_Config+0x40>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <SysTick_Config+0x40>)
 8000588:	2207      	movs	r2, #7
 800058a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	e000e010 	.word	0xe000e010

0800059c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff ff2d 	bl	8000404 <__NVIC_SetPriorityGrouping>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b086      	sub	sp, #24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4603      	mov	r3, r0
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005c4:	f7ff ff42 	bl	800044c <__NVIC_GetPriorityGrouping>
 80005c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	68b9      	ldr	r1, [r7, #8]
 80005ce:	6978      	ldr	r0, [r7, #20]
 80005d0:	f7ff ff90 	bl	80004f4 <NVIC_EncodePriority>
 80005d4:	4602      	mov	r2, r0
 80005d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005da:	4611      	mov	r1, r2
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff5f 	bl	80004a0 <__NVIC_SetPriority>
}
 80005e2:	bf00      	nop
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	4603      	mov	r3, r0
 80005f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80005f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ff35 	bl	8000468 <__NVIC_EnableIRQ>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff ffa2 	bl	8000558 <SysTick_Config>
 8000614:	4603      	mov	r3, r0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000622:	f000 f802 	bl	800062a <HAL_SYSTICK_Callback>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
	...

08000638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000638:	b480      	push	{r7}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000642:	2300      	movs	r3, #0
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800064a:	e169      	b.n	8000920 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800064c:	2201      	movs	r2, #1
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	69fa      	ldr	r2, [r7, #28]
 800065c:	4013      	ands	r3, r2
 800065e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000660:	69ba      	ldr	r2, [r7, #24]
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	429a      	cmp	r2, r3
 8000666:	f040 8158 	bne.w	800091a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	4a9a      	ldr	r2, [pc, #616]	; (80008d8 <HAL_GPIO_Init+0x2a0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d05e      	beq.n	8000732 <HAL_GPIO_Init+0xfa>
 8000674:	4a98      	ldr	r2, [pc, #608]	; (80008d8 <HAL_GPIO_Init+0x2a0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d875      	bhi.n	8000766 <HAL_GPIO_Init+0x12e>
 800067a:	4a98      	ldr	r2, [pc, #608]	; (80008dc <HAL_GPIO_Init+0x2a4>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d058      	beq.n	8000732 <HAL_GPIO_Init+0xfa>
 8000680:	4a96      	ldr	r2, [pc, #600]	; (80008dc <HAL_GPIO_Init+0x2a4>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d86f      	bhi.n	8000766 <HAL_GPIO_Init+0x12e>
 8000686:	4a96      	ldr	r2, [pc, #600]	; (80008e0 <HAL_GPIO_Init+0x2a8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d052      	beq.n	8000732 <HAL_GPIO_Init+0xfa>
 800068c:	4a94      	ldr	r2, [pc, #592]	; (80008e0 <HAL_GPIO_Init+0x2a8>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d869      	bhi.n	8000766 <HAL_GPIO_Init+0x12e>
 8000692:	4a94      	ldr	r2, [pc, #592]	; (80008e4 <HAL_GPIO_Init+0x2ac>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d04c      	beq.n	8000732 <HAL_GPIO_Init+0xfa>
 8000698:	4a92      	ldr	r2, [pc, #584]	; (80008e4 <HAL_GPIO_Init+0x2ac>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d863      	bhi.n	8000766 <HAL_GPIO_Init+0x12e>
 800069e:	4a92      	ldr	r2, [pc, #584]	; (80008e8 <HAL_GPIO_Init+0x2b0>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d046      	beq.n	8000732 <HAL_GPIO_Init+0xfa>
 80006a4:	4a90      	ldr	r2, [pc, #576]	; (80008e8 <HAL_GPIO_Init+0x2b0>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d85d      	bhi.n	8000766 <HAL_GPIO_Init+0x12e>
 80006aa:	2b12      	cmp	r3, #18
 80006ac:	d82a      	bhi.n	8000704 <HAL_GPIO_Init+0xcc>
 80006ae:	2b12      	cmp	r3, #18
 80006b0:	d859      	bhi.n	8000766 <HAL_GPIO_Init+0x12e>
 80006b2:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <HAL_GPIO_Init+0x80>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	08000733 	.word	0x08000733
 80006bc:	0800070d 	.word	0x0800070d
 80006c0:	0800071f 	.word	0x0800071f
 80006c4:	08000761 	.word	0x08000761
 80006c8:	08000767 	.word	0x08000767
 80006cc:	08000767 	.word	0x08000767
 80006d0:	08000767 	.word	0x08000767
 80006d4:	08000767 	.word	0x08000767
 80006d8:	08000767 	.word	0x08000767
 80006dc:	08000767 	.word	0x08000767
 80006e0:	08000767 	.word	0x08000767
 80006e4:	08000767 	.word	0x08000767
 80006e8:	08000767 	.word	0x08000767
 80006ec:	08000767 	.word	0x08000767
 80006f0:	08000767 	.word	0x08000767
 80006f4:	08000767 	.word	0x08000767
 80006f8:	08000767 	.word	0x08000767
 80006fc:	08000715 	.word	0x08000715
 8000700:	08000729 	.word	0x08000729
 8000704:	4a79      	ldr	r2, [pc, #484]	; (80008ec <HAL_GPIO_Init+0x2b4>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d013      	beq.n	8000732 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800070a:	e02c      	b.n	8000766 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	623b      	str	r3, [r7, #32]
          break;
 8000712:	e029      	b.n	8000768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	3304      	adds	r3, #4
 800071a:	623b      	str	r3, [r7, #32]
          break;
 800071c:	e024      	b.n	8000768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	3308      	adds	r3, #8
 8000724:	623b      	str	r3, [r7, #32]
          break;
 8000726:	e01f      	b.n	8000768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	330c      	adds	r3, #12
 800072e:	623b      	str	r3, [r7, #32]
          break;
 8000730:	e01a      	b.n	8000768 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d102      	bne.n	8000740 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800073a:	2304      	movs	r3, #4
 800073c:	623b      	str	r3, [r7, #32]
          break;
 800073e:	e013      	b.n	8000768 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d105      	bne.n	8000754 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000748:	2308      	movs	r3, #8
 800074a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	69fa      	ldr	r2, [r7, #28]
 8000750:	611a      	str	r2, [r3, #16]
          break;
 8000752:	e009      	b.n	8000768 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000754:	2308      	movs	r3, #8
 8000756:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	615a      	str	r2, [r3, #20]
          break;
 800075e:	e003      	b.n	8000768 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
          break;
 8000764:	e000      	b.n	8000768 <HAL_GPIO_Init+0x130>
          break;
 8000766:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	2bff      	cmp	r3, #255	; 0xff
 800076c:	d801      	bhi.n	8000772 <HAL_GPIO_Init+0x13a>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	e001      	b.n	8000776 <HAL_GPIO_Init+0x13e>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3304      	adds	r3, #4
 8000776:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	2bff      	cmp	r3, #255	; 0xff
 800077c:	d802      	bhi.n	8000784 <HAL_GPIO_Init+0x14c>
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	e002      	b.n	800078a <HAL_GPIO_Init+0x152>
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	3b08      	subs	r3, #8
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	210f      	movs	r1, #15
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	401a      	ands	r2, r3
 800079c:	6a39      	ldr	r1, [r7, #32]
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	431a      	orrs	r2, r3
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f000 80b1 	beq.w	800091a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007b8:	4b4d      	ldr	r3, [pc, #308]	; (80008f0 <HAL_GPIO_Init+0x2b8>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a4c      	ldr	r2, [pc, #304]	; (80008f0 <HAL_GPIO_Init+0x2b8>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <HAL_GPIO_Init+0x2b8>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80007d0:	4a48      	ldr	r2, [pc, #288]	; (80008f4 <HAL_GPIO_Init+0x2bc>)
 80007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d4:	089b      	lsrs	r3, r3, #2
 80007d6:	3302      	adds	r3, #2
 80007d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80007de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e0:	f003 0303 	and.w	r3, r3, #3
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	220f      	movs	r2, #15
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	43db      	mvns	r3, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a40      	ldr	r2, [pc, #256]	; (80008f8 <HAL_GPIO_Init+0x2c0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d013      	beq.n	8000824 <HAL_GPIO_Init+0x1ec>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a3f      	ldr	r2, [pc, #252]	; (80008fc <HAL_GPIO_Init+0x2c4>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d00d      	beq.n	8000820 <HAL_GPIO_Init+0x1e8>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a3e      	ldr	r2, [pc, #248]	; (8000900 <HAL_GPIO_Init+0x2c8>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d007      	beq.n	800081c <HAL_GPIO_Init+0x1e4>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a3d      	ldr	r2, [pc, #244]	; (8000904 <HAL_GPIO_Init+0x2cc>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d101      	bne.n	8000818 <HAL_GPIO_Init+0x1e0>
 8000814:	2303      	movs	r3, #3
 8000816:	e006      	b.n	8000826 <HAL_GPIO_Init+0x1ee>
 8000818:	2304      	movs	r3, #4
 800081a:	e004      	b.n	8000826 <HAL_GPIO_Init+0x1ee>
 800081c:	2302      	movs	r3, #2
 800081e:	e002      	b.n	8000826 <HAL_GPIO_Init+0x1ee>
 8000820:	2301      	movs	r3, #1
 8000822:	e000      	b.n	8000826 <HAL_GPIO_Init+0x1ee>
 8000824:	2300      	movs	r3, #0
 8000826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000828:	f002 0203 	and.w	r2, r2, #3
 800082c:	0092      	lsls	r2, r2, #2
 800082e:	4093      	lsls	r3, r2
 8000830:	68fa      	ldr	r2, [r7, #12]
 8000832:	4313      	orrs	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000836:	492f      	ldr	r1, [pc, #188]	; (80008f4 <HAL_GPIO_Init+0x2bc>)
 8000838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083a:	089b      	lsrs	r3, r3, #2
 800083c:	3302      	adds	r3, #2
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800084c:	2b00      	cmp	r3, #0
 800084e:	d006      	beq.n	800085e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	492c      	ldr	r1, [pc, #176]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	4313      	orrs	r3, r2
 800085a:	608b      	str	r3, [r1, #8]
 800085c:	e006      	b.n	800086c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	43db      	mvns	r3, r3
 8000866:	4928      	ldr	r1, [pc, #160]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 8000868:	4013      	ands	r3, r2
 800086a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000874:	2b00      	cmp	r3, #0
 8000876:	d006      	beq.n	8000886 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	4922      	ldr	r1, [pc, #136]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	60cb      	str	r3, [r1, #12]
 8000884:	e006      	b.n	8000894 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 8000888:	68da      	ldr	r2, [r3, #12]
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	43db      	mvns	r3, r3
 800088e:	491e      	ldr	r1, [pc, #120]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 8000890:	4013      	ands	r3, r2
 8000892:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d006      	beq.n	80008ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	4918      	ldr	r1, [pc, #96]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	604b      	str	r3, [r1, #4]
 80008ac:	e006      	b.n	80008bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 80008b0:	685a      	ldr	r2, [r3, #4]
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	43db      	mvns	r3, r3
 80008b6:	4914      	ldr	r1, [pc, #80]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 80008b8:	4013      	ands	r3, r2
 80008ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d021      	beq.n	800090c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	490e      	ldr	r1, [pc, #56]	; (8000908 <HAL_GPIO_Init+0x2d0>)
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	600b      	str	r3, [r1, #0]
 80008d4:	e021      	b.n	800091a <HAL_GPIO_Init+0x2e2>
 80008d6:	bf00      	nop
 80008d8:	10320000 	.word	0x10320000
 80008dc:	10310000 	.word	0x10310000
 80008e0:	10220000 	.word	0x10220000
 80008e4:	10210000 	.word	0x10210000
 80008e8:	10120000 	.word	0x10120000
 80008ec:	10110000 	.word	0x10110000
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010000 	.word	0x40010000
 80008f8:	40010800 	.word	0x40010800
 80008fc:	40010c00 	.word	0x40010c00
 8000900:	40011000 	.word	0x40011000
 8000904:	40011400 	.word	0x40011400
 8000908:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_GPIO_Init+0x304>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	43db      	mvns	r3, r3
 8000914:	4909      	ldr	r1, [pc, #36]	; (800093c <HAL_GPIO_Init+0x304>)
 8000916:	4013      	ands	r3, r2
 8000918:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	3301      	adds	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	fa22 f303 	lsr.w	r3, r2, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	f47f ae8e 	bne.w	800064c <HAL_GPIO_Init+0x14>
  }
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	372c      	adds	r7, #44	; 0x2c
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40010400 	.word	0x40010400

08000940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_RCC_GetHCLKFreq+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000958:	f7ff fff2 	bl	8000940 <HAL_RCC_GetHCLKFreq>
 800095c:	4602      	mov	r2, r0
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	4903      	ldr	r1, [pc, #12]	; (8000978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800096a:	5ccb      	ldrb	r3, [r1, r3]
 800096c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000970:	4618      	mov	r0, r3
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	08000dc4 	.word	0x08000dc4

0800097c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000980:	f7ff ffde 	bl	8000940 <HAL_RCC_GetHCLKFreq>
 8000984:	4602      	mov	r2, r0
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	0adb      	lsrs	r3, r3, #11
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	4903      	ldr	r1, [pc, #12]	; (80009a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000992:	5ccb      	ldrb	r3, [r1, r3]
 8000994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000998:	4618      	mov	r0, r3
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000
 80009a0:	08000dc4 	.word	0x08000dc4

080009a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e042      	b.n	8000a3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d106      	bne.n	80009d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fc3e 	bl	800024c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2224      	movs	r2, #36	; 0x24
 80009d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68da      	ldr	r2, [r3, #12]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f91d 	bl	8000c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	691a      	ldr	r2, [r3, #16]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80009fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	695a      	ldr	r2, [r3, #20]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2220      	movs	r2, #32
 8000a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2220      	movs	r2, #32
 8000a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4613      	mov	r3, r2
 8000a52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b20      	cmp	r3, #32
 8000a62:	d16d      	bne.n	8000b40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <HAL_UART_Transmit+0x2c>
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e066      	b.n	8000b42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2200      	movs	r2, #0
 8000a78:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2221      	movs	r2, #33	; 0x21
 8000a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000a82:	f7ff fcb5 	bl	80003f0 <HAL_GetTick>
 8000a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	88fa      	ldrh	r2, [r7, #6]
 8000a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	88fa      	ldrh	r2, [r7, #6]
 8000a92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a9c:	d108      	bne.n	8000ab0 <HAL_UART_Transmit+0x6c>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d104      	bne.n	8000ab0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	e003      	b.n	8000ab8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000ab8:	e02a      	b.n	8000b10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 f840 	bl	8000b4a <UART_WaitOnFlagUntilTimeout>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e036      	b.n	8000b42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d10b      	bne.n	8000af2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ae8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	3302      	adds	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	e007      	b.n	8000b02 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	3301      	adds	r3, #1
 8000b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1cf      	bne.n	8000aba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2200      	movs	r2, #0
 8000b22:	2140      	movs	r1, #64	; 0x40
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f000 f810 	bl	8000b4a <UART_WaitOnFlagUntilTimeout>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8000b30:	2303      	movs	r3, #3
 8000b32:	e006      	b.n	8000b42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2220      	movs	r2, #32
 8000b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e000      	b.n	8000b42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8000b40:	2302      	movs	r3, #2
  }
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b090      	sub	sp, #64	; 0x40
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4613      	mov	r3, r2
 8000b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000b5a:	e050      	b.n	8000bfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b62:	d04c      	beq.n	8000bfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d007      	beq.n	8000b7a <UART_WaitOnFlagUntilTimeout+0x30>
 8000b6a:	f7ff fc41 	bl	80003f0 <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d241      	bcs.n	8000bfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	330c      	adds	r3, #12
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b84:	e853 3f00 	ldrex	r3, [r3]
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8000b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	330c      	adds	r3, #12
 8000b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b9a:	637a      	str	r2, [r7, #52]	; 0x34
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ba2:	e841 2300 	strex	r3, r2, [r1]
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1e5      	bne.n	8000b7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3314      	adds	r3, #20
 8000bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	e853 3f00 	ldrex	r3, [r3]
 8000bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	f023 0301 	bic.w	r3, r3, #1
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3314      	adds	r3, #20
 8000bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000bce:	623a      	str	r2, [r7, #32]
 8000bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000bd2:	69f9      	ldr	r1, [r7, #28]
 8000bd4:	6a3a      	ldr	r2, [r7, #32]
 8000bd6:	e841 2300 	strex	r3, r2, [r1]
 8000bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1e5      	bne.n	8000bae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2220      	movs	r2, #32
 8000be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2220      	movs	r2, #32
 8000bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e00f      	b.n	8000c1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4013      	ands	r3, r2
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2301      	moveq	r3, #1
 8000c10:	2300      	movne	r3, #0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d09f      	beq.n	8000b5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3740      	adds	r7, #64	; 0x40
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000c62:	f023 030c 	bic.w	r3, r3, #12
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	699a      	ldr	r2, [r3, #24]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a2c      	ldr	r2, [pc, #176]	; (8000d3c <UART_SetConfig+0x114>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d103      	bne.n	8000c98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000c90:	f7ff fe74 	bl	800097c <HAL_RCC_GetPCLK2Freq>
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	e002      	b.n	8000c9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8000c98:	f7ff fe5c 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000c9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009a      	lsls	r2, r3, #2
 8000ca8:	441a      	add	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb4:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <UART_SetConfig+0x118>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	0119      	lsls	r1, r3, #4
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009a      	lsls	r2, r3, #2
 8000cc8:	441a      	add	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <UART_SetConfig+0x118>)
 8000cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2064      	movs	r0, #100	; 0x64
 8000cde:	fb00 f303 	mul.w	r3, r0, r3
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	3332      	adds	r3, #50	; 0x32
 8000ce8:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <UART_SetConfig+0x118>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cf4:	4419      	add	r1, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009a      	lsls	r2, r3, #2
 8000d00:	441a      	add	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <UART_SetConfig+0x118>)
 8000d0e:	fba3 0302 	umull	r0, r3, r3, r2
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2064      	movs	r0, #100	; 0x64
 8000d16:	fb00 f303 	mul.w	r3, r0, r3
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	3332      	adds	r3, #50	; 0x32
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <UART_SetConfig+0x118>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	f003 020f 	and.w	r2, r3, #15
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	440a      	add	r2, r1
 8000d32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40013800 	.word	0x40013800
 8000d40:	51eb851f 	.word	0x51eb851f

08000d44 <__libc_init_array>:
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	2600      	movs	r6, #0
 8000d48:	4d0c      	ldr	r5, [pc, #48]	; (8000d7c <__libc_init_array+0x38>)
 8000d4a:	4c0d      	ldr	r4, [pc, #52]	; (8000d80 <__libc_init_array+0x3c>)
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	10a4      	asrs	r4, r4, #2
 8000d50:	42a6      	cmp	r6, r4
 8000d52:	d109      	bne.n	8000d68 <__libc_init_array+0x24>
 8000d54:	f000 f81a 	bl	8000d8c <_init>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	4d0a      	ldr	r5, [pc, #40]	; (8000d84 <__libc_init_array+0x40>)
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	; (8000d88 <__libc_init_array+0x44>)
 8000d5e:	1b64      	subs	r4, r4, r5
 8000d60:	10a4      	asrs	r4, r4, #2
 8000d62:	42a6      	cmp	r6, r4
 8000d64:	d105      	bne.n	8000d72 <__libc_init_array+0x2e>
 8000d66:	bd70      	pop	{r4, r5, r6, pc}
 8000d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d6c:	4798      	blx	r3
 8000d6e:	3601      	adds	r6, #1
 8000d70:	e7ee      	b.n	8000d50 <__libc_init_array+0xc>
 8000d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d76:	4798      	blx	r3
 8000d78:	3601      	adds	r6, #1
 8000d7a:	e7f2      	b.n	8000d62 <__libc_init_array+0x1e>
 8000d7c:	08000dcc 	.word	0x08000dcc
 8000d80:	08000dcc 	.word	0x08000dcc
 8000d84:	08000dcc 	.word	0x08000dcc
 8000d88:	08000dd0 	.word	0x08000dd0

08000d8c <_init>:
 8000d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8e:	bf00      	nop
 8000d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d92:	bc08      	pop	{r3}
 8000d94:	469e      	mov	lr, r3
 8000d96:	4770      	bx	lr

08000d98 <_fini>:
 8000d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9a:	bf00      	nop
 8000d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9e:	bc08      	pop	{r3}
 8000da0:	469e      	mov	lr, r3
 8000da2:	4770      	bx	lr
