
UART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001628  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001734  08001734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001780  08001780  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001780  08001780  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001780  08001780  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001780  08001780  00011780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001784  08001784  00011784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000010  08001798  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001798  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068c3  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001177  00000000  00000000  000268fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a0  00000000  00000000  00027a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00028018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016520  00000000  00000000  00028550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e58  00000000  00000000  0003ea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080e7a  00000000  00000000  000458c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015ac  00000000  00000000  000c6794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800171c 	.word	0x0800171c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800171c 	.word	0x0800171c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SysTick_Handler>:
 */

#include "main_app.h"
#include "stm32f1xx_hal.h"

void SysTick_Handler (void){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8000160:	f000 f984 	bl	800046c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000164:	f000 faab 	bl	80006be <HAL_SYSTICK_IRQHandler>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}

0800016c <main>:

UART_HandleTypeDef huart2;

char *user_data = "The application is running\r\n";

int main(void){
 800016c:	b580      	push	{r7, lr}
 800016e:	b09c      	sub	sp, #112	; 0x70
 8000170:	af00      	add	r7, sp, #0

	HAL_Init();
 8000172:	f000 f935 	bl	80003e0 <HAL_Init>
	SystemClock_Config();
 8000176:	f000 f847 	bl	8000208 <SystemClock_Config>
	UART2_Init(); // high level peripheral initialization
 800017a:	f000 f877 	bl	800026c <UART2_Init>

	uint16_t len_of_data = strlen(user_data);
 800017e:	4b20      	ldr	r3, [pc, #128]	; (8000200 <main+0x94>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4618      	mov	r0, r3
 8000184:	f7ff ffe2 	bl	800014c <strlen>
 8000188:	4603      	mov	r3, r0
 800018a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	HAL_UART_Transmit(&huart2, (uint8_t*)user_data, len_of_data, HAL_MAX_DELAY);
 800018e:	4b1c      	ldr	r3, [pc, #112]	; (8000200 <main+0x94>)
 8000190:	6819      	ldr	r1, [r3, #0]
 8000192:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	481a      	ldr	r0, [pc, #104]	; (8000204 <main+0x98>)
 800019c:	f001 f880 	bl	80012a0 <HAL_UART_Transmit>


	uint8_t rcvd_data;
	uint8_t data_buffer[100];
	uint32_t count = 0;
 80001a0:	2300      	movs	r3, #0
 80001a2:	66fb      	str	r3, [r7, #108]	; 0x6c

	// Clearing buffer before data reception
	memset(data_buffer, 0, sizeof(data_buffer));
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2264      	movs	r2, #100	; 0x64
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f001 faae 	bl	800170c <memset>

	while(1){

		HAL_UART_Receive(&huart2, &rcvd_data, 1, HAL_MAX_DELAY);
 80001b0:	f107 0169 	add.w	r1, r7, #105	; 0x69
 80001b4:	f04f 33ff 	mov.w	r3, #4294967295
 80001b8:	2201      	movs	r2, #1
 80001ba:	4812      	ldr	r0, [pc, #72]	; (8000204 <main+0x98>)
 80001bc:	f001 f8f3 	bl	80013a6 <HAL_UART_Receive>
		if(rcvd_data == '\r'){
 80001c0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80001c4:	2b0d      	cmp	r3, #13
 80001c6:	d009      	beq.n	80001dc <main+0x70>
			break;
		}else{
			data_buffer[count++] = rcvd_data;
 80001c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80001ca:	1c5a      	adds	r2, r3, #1
 80001cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80001ce:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 80001d2:	3370      	adds	r3, #112	; 0x70
 80001d4:	443b      	add	r3, r7
 80001d6:	f803 2c6c 	strb.w	r2, [r3, #-108]
		HAL_UART_Receive(&huart2, &rcvd_data, 1, HAL_MAX_DELAY);
 80001da:	e7e9      	b.n	80001b0 <main+0x44>
			break;
 80001dc:	bf00      	nop
		}
	}

	data_buffer[count++] = '\r';
 80001de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80001e0:	1c5a      	adds	r2, r3, #1
 80001e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80001e4:	3370      	adds	r3, #112	; 0x70
 80001e6:	443b      	add	r3, r7
 80001e8:	220d      	movs	r2, #13
 80001ea:	f803 2c6c 	strb.w	r2, [r3, #-108]

	HAL_UART_Transmit(&huart2, data_buffer, count, HAL_MAX_DELAY);
 80001ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80001f0:	b29a      	uxth	r2, r3
 80001f2:	1d39      	adds	r1, r7, #4
 80001f4:	f04f 33ff 	mov.w	r3, #4294967295
 80001f8:	4802      	ldr	r0, [pc, #8]	; (8000204 <main+0x98>)
 80001fa:	f001 f851 	bl	80012a0 <HAL_UART_Transmit>

	while(1);
 80001fe:	e7fe      	b.n	80001fe <main+0x92>
 8000200:	20000000 	.word	0x20000000
 8000204:	2000002c 	.word	0x2000002c

08000208 <SystemClock_Config>:

	return 0;
}

void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	; 0x40
 800020c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fa78 	bl	800170c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fbce 	bl	80009e0 <HAL_RCC_OscConfig>
	    //Error_Handler();
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000248:	2300      	movs	r3, #0
 800024a:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	617b      	str	r3, [r7, #20]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2100      	movs	r1, #0
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fe41 	bl	8000ee4 <HAL_RCC_ClockConfig>
	  {
	    //Error_Handler();
	  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	; 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <UART2_Init>:


void UART2_Init(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <UART2_Init+0x44>)
 8000272:	4a10      	ldr	r2, [pc, #64]	; (80002b4 <UART2_Init+0x48>)
 8000274:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <UART2_Init+0x44>)
 8000278:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800027c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <UART2_Init+0x44>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <UART2_Init+0x44>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <UART2_Init+0x44>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <UART2_Init+0x44>)
 8000292:	2200      	movs	r2, #0
 8000294:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <UART2_Init+0x44>)
 8000298:	220c      	movs	r2, #12
 800029a:	615a      	str	r2, [r3, #20]
	//huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if( HAL_UART_Init(&huart2) != HAL_OK ){
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <UART2_Init+0x44>)
 800029e:	f000 ffaf 	bl	8001200 <HAL_UART_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <UART2_Init+0x40>
		// There is a problem
		Error_handler();
 80002a8:	f000 f806 	bl	80002b8 <Error_handler>
	}

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	2000002c 	.word	0x2000002c
 80002b4:	40004400 	.word	0x40004400

080002b8 <Error_handler>:

void Error_handler(void){
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

	while(1);
 80002bc:	e7fe      	b.n	80002bc <Error_handler+0x4>
	...

080002c0 <HAL_MspInit>:
 */

#include "stm32f1xx_hal.h"

void HAL_MspInit(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  // Here we will do low level processor specific initis

	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); // this is actually no required because this config is by default
 80002c4:	2003      	movs	r0, #3
 80002c6:	f000 f9b9 	bl	800063c <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; // enable usage fault, memory fault and bus fault system exeptions
 80002ca:	4b0d      	ldr	r3, [pc, #52]	; (8000300 <HAL_MspInit+0x40>)
 80002cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ce:	4a0c      	ldr	r2, [pc, #48]	; (8000300 <HAL_MspInit+0x40>)
 80002d0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80002d4:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2100      	movs	r1, #0
 80002da:	f06f 000b 	mvn.w	r0, #11
 80002de:	f000 f9b8 	bl	8000652 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2100      	movs	r1, #0
 80002e6:	f06f 000a 	mvn.w	r0, #10
 80002ea:	f000 f9b2 	bl	8000652 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2100      	movs	r1, #0
 80002f2:	f06f 0009 	mvn.w	r0, #9
 80002f6:	f000 f9ac 	bl	8000652 <HAL_NVIC_SetPriority>

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	// here we are going to do the low level inits. of the USART2 peripheral

	// 1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	//__HAL_RCC_AFIO_CLK_ENABLE();
	__HAL_RCC_USART2_CLK_ENABLE();
 800030c:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <HAL_UART_MspInit+0x7c>)
 800030e:	69db      	ldr	r3, [r3, #28]
 8000310:	4a1b      	ldr	r2, [pc, #108]	; (8000380 <HAL_UART_MspInit+0x7c>)
 8000312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000316:	61d3      	str	r3, [r2, #28]
 8000318:	4b19      	ldr	r3, [pc, #100]	; (8000380 <HAL_UART_MspInit+0x7c>)
 800031a:	69db      	ldr	r3, [r3, #28]
 800031c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	4b16      	ldr	r3, [pc, #88]	; (8000380 <HAL_UART_MspInit+0x7c>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a15      	ldr	r2, [pc, #84]	; (8000380 <HAL_UART_MspInit+0x7c>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b13      	ldr	r3, [pc, #76]	; (8000380 <HAL_UART_MspInit+0x7c>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0304 	and.w	r3, r3, #4
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	68bb      	ldr	r3, [r7, #8]

	// 2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; // UART2_TX
 800033c:	2304      	movs	r3, #4
 800033e:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000340:	2302      	movs	r3, #2
 8000342:	617b      	str	r3, [r7, #20]
	gpio_uart.Pull = GPIO_PULLUP;
 8000344:	2301      	movs	r3, #1
 8000346:	61bb      	str	r3, [r7, #24]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000348:	2302      	movs	r3, #2
 800034a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4619      	mov	r1, r3
 8000352:	480c      	ldr	r0, [pc, #48]	; (8000384 <HAL_UART_MspInit+0x80>)
 8000354:	f000 f9c0 	bl	80006d8 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;	// UART_RX
 8000358:	2308      	movs	r3, #8
 800035a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	4619      	mov	r1, r3
 8000362:	4808      	ldr	r0, [pc, #32]	; (8000384 <HAL_UART_MspInit+0x80>)
 8000364:	f000 f9b8 	bl	80006d8 <HAL_GPIO_Init>



	// 3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000368:	2026      	movs	r0, #38	; 0x26
 800036a:	f000 f98e 	bl	800068a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	210f      	movs	r1, #15
 8000372:	2026      	movs	r0, #38	; 0x26
 8000374:	f000 f96d 	bl	8000652 <HAL_NVIC_SetPriority>
}
 8000378:	bf00      	nop
 800037a:	3720      	adds	r7, #32
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	40010800 	.word	0x40010800

08000388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000394:	f7ff fff8 	bl	8000388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480b      	ldr	r0, [pc, #44]	; (80003c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800039a:	490c      	ldr	r1, [pc, #48]	; (80003cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003b0:	4c09      	ldr	r4, [pc, #36]	; (80003d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003be:	f001 f981 	bl	80016c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff fed3 	bl	800016c <main>
  bx lr
 80003c6:	4770      	bx	lr
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80003d0:	08001788 	.word	0x08001788
  ldr r2, =_sbss
 80003d4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80003d8:	20000078 	.word	0x20000078

080003dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC1_2_IRQHandler>
	...

080003e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e4:	4b08      	ldr	r3, [pc, #32]	; (8000408 <HAL_Init+0x28>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a07      	ldr	r2, [pc, #28]	; (8000408 <HAL_Init+0x28>)
 80003ea:	f043 0310 	orr.w	r3, r3, #16
 80003ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003f0:	2003      	movs	r0, #3
 80003f2:	f000 f923 	bl	800063c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003f6:	200f      	movs	r0, #15
 80003f8:	f000 f808 	bl	800040c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003fc:	f7ff ff60 	bl	80002c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40022000 	.word	0x40022000

0800040c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_InitTick+0x54>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <HAL_InitTick+0x58>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4619      	mov	r1, r3
 800041e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000422:	fbb3 f3f1 	udiv	r3, r3, r1
 8000426:	fbb2 f3f3 	udiv	r3, r2, r3
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f93b 	bl	80006a6 <HAL_SYSTICK_Config>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000436:	2301      	movs	r3, #1
 8000438:	e00e      	b.n	8000458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b0f      	cmp	r3, #15
 800043e:	d80a      	bhi.n	8000456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000440:	2200      	movs	r2, #0
 8000442:	6879      	ldr	r1, [r7, #4]
 8000444:	f04f 30ff 	mov.w	r0, #4294967295
 8000448:	f000 f903 	bl	8000652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800044c:	4a06      	ldr	r2, [pc, #24]	; (8000468 <HAL_InitTick+0x5c>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000452:	2300      	movs	r3, #0
 8000454:	e000      	b.n	8000458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000456:	2301      	movs	r3, #1
}
 8000458:	4618      	mov	r0, r3
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000004 	.word	0x20000004
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008

0800046c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_IncTick+0x1c>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <HAL_IncTick+0x20>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4413      	add	r3, r2
 800047c:	4a03      	ldr	r2, [pc, #12]	; (800048c <HAL_IncTick+0x20>)
 800047e:	6013      	str	r3, [r2, #0]
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	2000000c 	.word	0x2000000c
 800048c:	20000074 	.word	0x20000074

08000490 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  return uwTick;
 8000494:	4b02      	ldr	r3, [pc, #8]	; (80004a0 <HAL_GetTick+0x10>)
 8000496:	681b      	ldr	r3, [r3, #0]
}
 8000498:	4618      	mov	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	20000074 	.word	0x20000074

080004a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f003 0307 	and.w	r3, r3, #7
 80004b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <__NVIC_SetPriorityGrouping+0x44>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004d6:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <__NVIC_SetPriorityGrouping+0x44>)
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	60d3      	str	r3, [r2, #12]
}
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <__NVIC_GetPriorityGrouping+0x18>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	0a1b      	lsrs	r3, r3, #8
 80004f6:	f003 0307 	and.w	r3, r3, #7
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000ed00 	.word	0xe000ed00

08000508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000516:	2b00      	cmp	r3, #0
 8000518:	db0b      	blt.n	8000532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f003 021f 	and.w	r2, r3, #31
 8000520:	4906      	ldr	r1, [pc, #24]	; (800053c <__NVIC_EnableIRQ+0x34>)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	095b      	lsrs	r3, r3, #5
 8000528:	2001      	movs	r0, #1
 800052a:	fa00 f202 	lsl.w	r2, r0, r2
 800052e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	e000e100 	.word	0xe000e100

08000540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	6039      	str	r1, [r7, #0]
 800054a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000550:	2b00      	cmp	r3, #0
 8000552:	db0a      	blt.n	800056a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	b2da      	uxtb	r2, r3
 8000558:	490c      	ldr	r1, [pc, #48]	; (800058c <__NVIC_SetPriority+0x4c>)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	0112      	lsls	r2, r2, #4
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	440b      	add	r3, r1
 8000564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000568:	e00a      	b.n	8000580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4908      	ldr	r1, [pc, #32]	; (8000590 <__NVIC_SetPriority+0x50>)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	f003 030f 	and.w	r3, r3, #15
 8000576:	3b04      	subs	r3, #4
 8000578:	0112      	lsls	r2, r2, #4
 800057a:	b2d2      	uxtb	r2, r2
 800057c:	440b      	add	r3, r1
 800057e:	761a      	strb	r2, [r3, #24]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000e100 	.word	0xe000e100
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000594:	b480      	push	{r7}
 8000596:	b089      	sub	sp, #36	; 0x24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	f1c3 0307 	rsb	r3, r3, #7
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	bf28      	it	cs
 80005b2:	2304      	movcs	r3, #4
 80005b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	3304      	adds	r3, #4
 80005ba:	2b06      	cmp	r3, #6
 80005bc:	d902      	bls.n	80005c4 <NVIC_EncodePriority+0x30>
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	3b03      	subs	r3, #3
 80005c2:	e000      	b.n	80005c6 <NVIC_EncodePriority+0x32>
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c8:	f04f 32ff 	mov.w	r2, #4294967295
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	43da      	mvns	r2, r3
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	401a      	ands	r2, r3
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005dc:	f04f 31ff 	mov.w	r1, #4294967295
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	fa01 f303 	lsl.w	r3, r1, r3
 80005e6:	43d9      	mvns	r1, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	4313      	orrs	r3, r2
         );
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3724      	adds	r7, #36	; 0x24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3b01      	subs	r3, #1
 8000604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000608:	d301      	bcc.n	800060e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800060a:	2301      	movs	r3, #1
 800060c:	e00f      	b.n	800062e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <SysTick_Config+0x40>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3b01      	subs	r3, #1
 8000614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000616:	210f      	movs	r1, #15
 8000618:	f04f 30ff 	mov.w	r0, #4294967295
 800061c:	f7ff ff90 	bl	8000540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <SysTick_Config+0x40>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <SysTick_Config+0x40>)
 8000628:	2207      	movs	r2, #7
 800062a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	e000e010 	.word	0xe000e010

0800063c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff ff2d 	bl	80004a4 <__NVIC_SetPriorityGrouping>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	4603      	mov	r3, r0
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
 800065e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000664:	f7ff ff42 	bl	80004ec <__NVIC_GetPriorityGrouping>
 8000668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	6978      	ldr	r0, [r7, #20]
 8000670:	f7ff ff90 	bl	8000594 <NVIC_EncodePriority>
 8000674:	4602      	mov	r2, r0
 8000676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff5f 	bl	8000540 <__NVIC_SetPriority>
}
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	4603      	mov	r3, r0
 8000692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff35 	bl	8000508 <__NVIC_EnableIRQ>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ffa2 	bl	80005f8 <SysTick_Config>
 80006b4:	4603      	mov	r3, r0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80006c2:	f000 f802 	bl	80006ca <HAL_SYSTICK_Callback>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}

080006ca <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
	...

080006d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d8:	b480      	push	{r7}
 80006da:	b08b      	sub	sp, #44	; 0x2c
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006ea:	e169      	b.n	80009c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006ec:	2201      	movs	r2, #1
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	69fa      	ldr	r2, [r7, #28]
 80006fc:	4013      	ands	r3, r2
 80006fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000700:	69ba      	ldr	r2, [r7, #24]
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	429a      	cmp	r2, r3
 8000706:	f040 8158 	bne.w	80009ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	4a9a      	ldr	r2, [pc, #616]	; (8000978 <HAL_GPIO_Init+0x2a0>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d05e      	beq.n	80007d2 <HAL_GPIO_Init+0xfa>
 8000714:	4a98      	ldr	r2, [pc, #608]	; (8000978 <HAL_GPIO_Init+0x2a0>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d875      	bhi.n	8000806 <HAL_GPIO_Init+0x12e>
 800071a:	4a98      	ldr	r2, [pc, #608]	; (800097c <HAL_GPIO_Init+0x2a4>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d058      	beq.n	80007d2 <HAL_GPIO_Init+0xfa>
 8000720:	4a96      	ldr	r2, [pc, #600]	; (800097c <HAL_GPIO_Init+0x2a4>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d86f      	bhi.n	8000806 <HAL_GPIO_Init+0x12e>
 8000726:	4a96      	ldr	r2, [pc, #600]	; (8000980 <HAL_GPIO_Init+0x2a8>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d052      	beq.n	80007d2 <HAL_GPIO_Init+0xfa>
 800072c:	4a94      	ldr	r2, [pc, #592]	; (8000980 <HAL_GPIO_Init+0x2a8>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d869      	bhi.n	8000806 <HAL_GPIO_Init+0x12e>
 8000732:	4a94      	ldr	r2, [pc, #592]	; (8000984 <HAL_GPIO_Init+0x2ac>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d04c      	beq.n	80007d2 <HAL_GPIO_Init+0xfa>
 8000738:	4a92      	ldr	r2, [pc, #584]	; (8000984 <HAL_GPIO_Init+0x2ac>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d863      	bhi.n	8000806 <HAL_GPIO_Init+0x12e>
 800073e:	4a92      	ldr	r2, [pc, #584]	; (8000988 <HAL_GPIO_Init+0x2b0>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d046      	beq.n	80007d2 <HAL_GPIO_Init+0xfa>
 8000744:	4a90      	ldr	r2, [pc, #576]	; (8000988 <HAL_GPIO_Init+0x2b0>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d85d      	bhi.n	8000806 <HAL_GPIO_Init+0x12e>
 800074a:	2b12      	cmp	r3, #18
 800074c:	d82a      	bhi.n	80007a4 <HAL_GPIO_Init+0xcc>
 800074e:	2b12      	cmp	r3, #18
 8000750:	d859      	bhi.n	8000806 <HAL_GPIO_Init+0x12e>
 8000752:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <HAL_GPIO_Init+0x80>)
 8000754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000758:	080007d3 	.word	0x080007d3
 800075c:	080007ad 	.word	0x080007ad
 8000760:	080007bf 	.word	0x080007bf
 8000764:	08000801 	.word	0x08000801
 8000768:	08000807 	.word	0x08000807
 800076c:	08000807 	.word	0x08000807
 8000770:	08000807 	.word	0x08000807
 8000774:	08000807 	.word	0x08000807
 8000778:	08000807 	.word	0x08000807
 800077c:	08000807 	.word	0x08000807
 8000780:	08000807 	.word	0x08000807
 8000784:	08000807 	.word	0x08000807
 8000788:	08000807 	.word	0x08000807
 800078c:	08000807 	.word	0x08000807
 8000790:	08000807 	.word	0x08000807
 8000794:	08000807 	.word	0x08000807
 8000798:	08000807 	.word	0x08000807
 800079c:	080007b5 	.word	0x080007b5
 80007a0:	080007c9 	.word	0x080007c9
 80007a4:	4a79      	ldr	r2, [pc, #484]	; (800098c <HAL_GPIO_Init+0x2b4>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d013      	beq.n	80007d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007aa:	e02c      	b.n	8000806 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	623b      	str	r3, [r7, #32]
          break;
 80007b2:	e029      	b.n	8000808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	3304      	adds	r3, #4
 80007ba:	623b      	str	r3, [r7, #32]
          break;
 80007bc:	e024      	b.n	8000808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	3308      	adds	r3, #8
 80007c4:	623b      	str	r3, [r7, #32]
          break;
 80007c6:	e01f      	b.n	8000808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	330c      	adds	r3, #12
 80007ce:	623b      	str	r3, [r7, #32]
          break;
 80007d0:	e01a      	b.n	8000808 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d102      	bne.n	80007e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007da:	2304      	movs	r3, #4
 80007dc:	623b      	str	r3, [r7, #32]
          break;
 80007de:	e013      	b.n	8000808 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d105      	bne.n	80007f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007e8:	2308      	movs	r3, #8
 80007ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	69fa      	ldr	r2, [r7, #28]
 80007f0:	611a      	str	r2, [r3, #16]
          break;
 80007f2:	e009      	b.n	8000808 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007f4:	2308      	movs	r3, #8
 80007f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69fa      	ldr	r2, [r7, #28]
 80007fc:	615a      	str	r2, [r3, #20]
          break;
 80007fe:	e003      	b.n	8000808 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
          break;
 8000804:	e000      	b.n	8000808 <HAL_GPIO_Init+0x130>
          break;
 8000806:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	2bff      	cmp	r3, #255	; 0xff
 800080c:	d801      	bhi.n	8000812 <HAL_GPIO_Init+0x13a>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	e001      	b.n	8000816 <HAL_GPIO_Init+0x13e>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3304      	adds	r3, #4
 8000816:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	2bff      	cmp	r3, #255	; 0xff
 800081c:	d802      	bhi.n	8000824 <HAL_GPIO_Init+0x14c>
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	e002      	b.n	800082a <HAL_GPIO_Init+0x152>
 8000824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000826:	3b08      	subs	r3, #8
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	210f      	movs	r1, #15
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	401a      	ands	r2, r3
 800083c:	6a39      	ldr	r1, [r7, #32]
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	431a      	orrs	r2, r3
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	2b00      	cmp	r3, #0
 8000854:	f000 80b1 	beq.w	80009ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000858:	4b4d      	ldr	r3, [pc, #308]	; (8000990 <HAL_GPIO_Init+0x2b8>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a4c      	ldr	r2, [pc, #304]	; (8000990 <HAL_GPIO_Init+0x2b8>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b4a      	ldr	r3, [pc, #296]	; (8000990 <HAL_GPIO_Init+0x2b8>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000870:	4a48      	ldr	r2, [pc, #288]	; (8000994 <HAL_GPIO_Init+0x2bc>)
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	089b      	lsrs	r3, r3, #2
 8000876:	3302      	adds	r3, #2
 8000878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	f003 0303 	and.w	r3, r3, #3
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	220f      	movs	r2, #15
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	4013      	ands	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a40      	ldr	r2, [pc, #256]	; (8000998 <HAL_GPIO_Init+0x2c0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d013      	beq.n	80008c4 <HAL_GPIO_Init+0x1ec>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a3f      	ldr	r2, [pc, #252]	; (800099c <HAL_GPIO_Init+0x2c4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d00d      	beq.n	80008c0 <HAL_GPIO_Init+0x1e8>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a3e      	ldr	r2, [pc, #248]	; (80009a0 <HAL_GPIO_Init+0x2c8>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d007      	beq.n	80008bc <HAL_GPIO_Init+0x1e4>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a3d      	ldr	r2, [pc, #244]	; (80009a4 <HAL_GPIO_Init+0x2cc>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d101      	bne.n	80008b8 <HAL_GPIO_Init+0x1e0>
 80008b4:	2303      	movs	r3, #3
 80008b6:	e006      	b.n	80008c6 <HAL_GPIO_Init+0x1ee>
 80008b8:	2304      	movs	r3, #4
 80008ba:	e004      	b.n	80008c6 <HAL_GPIO_Init+0x1ee>
 80008bc:	2302      	movs	r3, #2
 80008be:	e002      	b.n	80008c6 <HAL_GPIO_Init+0x1ee>
 80008c0:	2301      	movs	r3, #1
 80008c2:	e000      	b.n	80008c6 <HAL_GPIO_Init+0x1ee>
 80008c4:	2300      	movs	r3, #0
 80008c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008c8:	f002 0203 	and.w	r2, r2, #3
 80008cc:	0092      	lsls	r2, r2, #2
 80008ce:	4093      	lsls	r3, r2
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008d6:	492f      	ldr	r1, [pc, #188]	; (8000994 <HAL_GPIO_Init+0x2bc>)
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	3302      	adds	r3, #2
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d006      	beq.n	80008fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008f0:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	492c      	ldr	r1, [pc, #176]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	608b      	str	r3, [r1, #8]
 80008fc:	e006      	b.n	800090c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	43db      	mvns	r3, r3
 8000906:	4928      	ldr	r1, [pc, #160]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 8000908:	4013      	ands	r3, r2
 800090a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d006      	beq.n	8000926 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	4922      	ldr	r1, [pc, #136]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	60cb      	str	r3, [r1, #12]
 8000924:	e006      	b.n	8000934 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	43db      	mvns	r3, r3
 800092e:	491e      	ldr	r1, [pc, #120]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 8000930:	4013      	ands	r3, r2
 8000932:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d006      	beq.n	800094e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	4918      	ldr	r1, [pc, #96]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4313      	orrs	r3, r2
 800094a:	604b      	str	r3, [r1, #4]
 800094c:	e006      	b.n	800095c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	43db      	mvns	r3, r3
 8000956:	4914      	ldr	r1, [pc, #80]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 8000958:	4013      	ands	r3, r2
 800095a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d021      	beq.n	80009ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	490e      	ldr	r1, [pc, #56]	; (80009a8 <HAL_GPIO_Init+0x2d0>)
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	4313      	orrs	r3, r2
 8000972:	600b      	str	r3, [r1, #0]
 8000974:	e021      	b.n	80009ba <HAL_GPIO_Init+0x2e2>
 8000976:	bf00      	nop
 8000978:	10320000 	.word	0x10320000
 800097c:	10310000 	.word	0x10310000
 8000980:	10220000 	.word	0x10220000
 8000984:	10210000 	.word	0x10210000
 8000988:	10120000 	.word	0x10120000
 800098c:	10110000 	.word	0x10110000
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000
 8000998:	40010800 	.word	0x40010800
 800099c:	40010c00 	.word	0x40010c00
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40011400 	.word	0x40011400
 80009a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_GPIO_Init+0x304>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	43db      	mvns	r3, r3
 80009b4:	4909      	ldr	r1, [pc, #36]	; (80009dc <HAL_GPIO_Init+0x304>)
 80009b6:	4013      	ands	r3, r2
 80009b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	3301      	adds	r3, #1
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f47f ae8e 	bne.w	80006ec <HAL_GPIO_Init+0x14>
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	372c      	adds	r7, #44	; 0x2c
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	40010400 	.word	0x40010400

080009e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d101      	bne.n	80009f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e272      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8087 	beq.w	8000b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a00:	4b92      	ldr	r3, [pc, #584]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 030c 	and.w	r3, r3, #12
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d00c      	beq.n	8000a26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a0c:	4b8f      	ldr	r3, [pc, #572]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 030c 	and.w	r3, r3, #12
 8000a14:	2b08      	cmp	r3, #8
 8000a16:	d112      	bne.n	8000a3e <HAL_RCC_OscConfig+0x5e>
 8000a18:	4b8c      	ldr	r3, [pc, #560]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a24:	d10b      	bne.n	8000a3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a26:	4b89      	ldr	r3, [pc, #548]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d06c      	beq.n	8000b0c <HAL_RCC_OscConfig+0x12c>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d168      	bne.n	8000b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e24c      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a46:	d106      	bne.n	8000a56 <HAL_RCC_OscConfig+0x76>
 8000a48:	4b80      	ldr	r3, [pc, #512]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a7f      	ldr	r2, [pc, #508]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	e02e      	b.n	8000ab4 <HAL_RCC_OscConfig+0xd4>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10c      	bne.n	8000a78 <HAL_RCC_OscConfig+0x98>
 8000a5e:	4b7b      	ldr	r3, [pc, #492]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a7a      	ldr	r2, [pc, #488]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	4b78      	ldr	r3, [pc, #480]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a77      	ldr	r2, [pc, #476]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	e01d      	b.n	8000ab4 <HAL_RCC_OscConfig+0xd4>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a80:	d10c      	bne.n	8000a9c <HAL_RCC_OscConfig+0xbc>
 8000a82:	4b72      	ldr	r3, [pc, #456]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a71      	ldr	r2, [pc, #452]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	4b6f      	ldr	r3, [pc, #444]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a6e      	ldr	r2, [pc, #440]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e00b      	b.n	8000ab4 <HAL_RCC_OscConfig+0xd4>
 8000a9c:	4b6b      	ldr	r3, [pc, #428]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a6a      	ldr	r2, [pc, #424]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b68      	ldr	r3, [pc, #416]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a67      	ldr	r2, [pc, #412]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ab2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d013      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000abc:	f7ff fce8 	bl	8000490 <HAL_GetTick>
 8000ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ac2:	e008      	b.n	8000ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ac4:	f7ff fce4 	bl	8000490 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	2b64      	cmp	r3, #100	; 0x64
 8000ad0:	d901      	bls.n	8000ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	e200      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad6:	4b5d      	ldr	r3, [pc, #372]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0f0      	beq.n	8000ac4 <HAL_RCC_OscConfig+0xe4>
 8000ae2:	e014      	b.n	8000b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fcd4 	bl	8000490 <HAL_GetTick>
 8000ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aea:	e008      	b.n	8000afe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aec:	f7ff fcd0 	bl	8000490 <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b64      	cmp	r3, #100	; 0x64
 8000af8:	d901      	bls.n	8000afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e1ec      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000afe:	4b53      	ldr	r3, [pc, #332]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1f0      	bne.n	8000aec <HAL_RCC_OscConfig+0x10c>
 8000b0a:	e000      	b.n	8000b0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d063      	beq.n	8000be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b1a:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 030c 	and.w	r3, r3, #12
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00b      	beq.n	8000b3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b26:	4b49      	ldr	r3, [pc, #292]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 030c 	and.w	r3, r3, #12
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d11c      	bne.n	8000b6c <HAL_RCC_OscConfig+0x18c>
 8000b32:	4b46      	ldr	r3, [pc, #280]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d116      	bne.n	8000b6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b3e:	4b43      	ldr	r3, [pc, #268]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <HAL_RCC_OscConfig+0x176>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d001      	beq.n	8000b56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e1c0      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b56:	4b3d      	ldr	r3, [pc, #244]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4939      	ldr	r1, [pc, #228]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000b66:	4313      	orrs	r3, r2
 8000b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b6a:	e03a      	b.n	8000be2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d020      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b74:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <HAL_RCC_OscConfig+0x270>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7a:	f7ff fc89 	bl	8000490 <HAL_GetTick>
 8000b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b80:	e008      	b.n	8000b94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b82:	f7ff fc85 	bl	8000490 <HAL_GetTick>
 8000b86:	4602      	mov	r2, r0
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d901      	bls.n	8000b94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b90:	2303      	movs	r3, #3
 8000b92:	e1a1      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b94:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f003 0302 	and.w	r3, r3, #2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0f0      	beq.n	8000b82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	4927      	ldr	r1, [pc, #156]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	600b      	str	r3, [r1, #0]
 8000bb4:	e015      	b.n	8000be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bb6:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <HAL_RCC_OscConfig+0x270>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fc68 	bl	8000490 <HAL_GetTick>
 8000bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bc2:	e008      	b.n	8000bd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bc4:	f7ff fc64 	bl	8000490 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d901      	bls.n	8000bd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e180      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f0      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d03a      	beq.n	8000c64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d019      	beq.n	8000c2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_RCC_OscConfig+0x274>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bfc:	f7ff fc48 	bl	8000490 <HAL_GetTick>
 8000c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c02:	e008      	b.n	8000c16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c04:	f7ff fc44 	bl	8000490 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e160      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_RCC_OscConfig+0x26c>)
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0f0      	beq.n	8000c04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 face 	bl	80011c4 <RCC_Delay>
 8000c28:	e01c      	b.n	8000c64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_RCC_OscConfig+0x274>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c30:	f7ff fc2e 	bl	8000490 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c36:	e00f      	b.n	8000c58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c38:	f7ff fc2a 	bl	8000490 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d908      	bls.n	8000c58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e146      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	42420000 	.word	0x42420000
 8000c54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c58:	4b92      	ldr	r3, [pc, #584]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1e9      	bne.n	8000c38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f000 80a6 	beq.w	8000dbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c76:	4b8b      	ldr	r3, [pc, #556]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10d      	bne.n	8000c9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b88      	ldr	r3, [pc, #544]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a87      	ldr	r2, [pc, #540]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b85      	ldr	r3, [pc, #532]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c9e:	4b82      	ldr	r3, [pc, #520]	; (8000ea8 <HAL_RCC_OscConfig+0x4c8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d118      	bne.n	8000cdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000caa:	4b7f      	ldr	r3, [pc, #508]	; (8000ea8 <HAL_RCC_OscConfig+0x4c8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a7e      	ldr	r2, [pc, #504]	; (8000ea8 <HAL_RCC_OscConfig+0x4c8>)
 8000cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cb6:	f7ff fbeb 	bl	8000490 <HAL_GetTick>
 8000cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cbc:	e008      	b.n	8000cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cbe:	f7ff fbe7 	bl	8000490 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b64      	cmp	r3, #100	; 0x64
 8000cca:	d901      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e103      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd0:	4b75      	ldr	r3, [pc, #468]	; (8000ea8 <HAL_RCC_OscConfig+0x4c8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f0      	beq.n	8000cbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d106      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x312>
 8000ce4:	4b6f      	ldr	r3, [pc, #444]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000ce6:	6a1b      	ldr	r3, [r3, #32]
 8000ce8:	4a6e      	ldr	r2, [pc, #440]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6213      	str	r3, [r2, #32]
 8000cf0:	e02d      	b.n	8000d4e <HAL_RCC_OscConfig+0x36e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x334>
 8000cfa:	4b6a      	ldr	r3, [pc, #424]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000cfc:	6a1b      	ldr	r3, [r3, #32]
 8000cfe:	4a69      	ldr	r2, [pc, #420]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	6213      	str	r3, [r2, #32]
 8000d06:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d08:	6a1b      	ldr	r3, [r3, #32]
 8000d0a:	4a66      	ldr	r2, [pc, #408]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d0c:	f023 0304 	bic.w	r3, r3, #4
 8000d10:	6213      	str	r3, [r2, #32]
 8000d12:	e01c      	b.n	8000d4e <HAL_RCC_OscConfig+0x36e>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d10c      	bne.n	8000d36 <HAL_RCC_OscConfig+0x356>
 8000d1c:	4b61      	ldr	r3, [pc, #388]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	4a60      	ldr	r2, [pc, #384]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6213      	str	r3, [r2, #32]
 8000d28:	4b5e      	ldr	r3, [pc, #376]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	4a5d      	ldr	r2, [pc, #372]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6213      	str	r3, [r2, #32]
 8000d34:	e00b      	b.n	8000d4e <HAL_RCC_OscConfig+0x36e>
 8000d36:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d38:	6a1b      	ldr	r3, [r3, #32]
 8000d3a:	4a5a      	ldr	r2, [pc, #360]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d3c:	f023 0301 	bic.w	r3, r3, #1
 8000d40:	6213      	str	r3, [r2, #32]
 8000d42:	4b58      	ldr	r3, [pc, #352]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	4a57      	ldr	r2, [pc, #348]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d48:	f023 0304 	bic.w	r3, r3, #4
 8000d4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d015      	beq.n	8000d82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d56:	f7ff fb9b 	bl	8000490 <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d5c:	e00a      	b.n	8000d74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d5e:	f7ff fb97 	bl	8000490 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e0b1      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d74:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0ee      	beq.n	8000d5e <HAL_RCC_OscConfig+0x37e>
 8000d80:	e014      	b.n	8000dac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d82:	f7ff fb85 	bl	8000490 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d88:	e00a      	b.n	8000da0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d8a:	f7ff fb81 	bl	8000490 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e09b      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000da0:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1ee      	bne.n	8000d8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d105      	bne.n	8000dbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	4a3b      	ldr	r2, [pc, #236]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 8087 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d061      	beq.n	8000e98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d146      	bne.n	8000e6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <HAL_RCC_OscConfig+0x4cc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de2:	f7ff fb55 	bl	8000490 <HAL_GetTick>
 8000de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dea:	f7ff fb51 	bl	8000490 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e06d      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dfc:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f0      	bne.n	8000dea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e10:	d108      	bne.n	8000e24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	4921      	ldr	r1, [pc, #132]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	4313      	orrs	r3, r2
 8000e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a19      	ldr	r1, [r3, #32]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	430b      	orrs	r3, r1
 8000e36:	491b      	ldr	r1, [pc, #108]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_RCC_OscConfig+0x4cc>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e42:	f7ff fb25 	bl	8000490 <HAL_GetTick>
 8000e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e48:	e008      	b.n	8000e5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e4a:	f7ff fb21 	bl	8000490 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e03d      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0f0      	beq.n	8000e4a <HAL_RCC_OscConfig+0x46a>
 8000e68:	e035      	b.n	8000ed6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_RCC_OscConfig+0x4cc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fb0e 	bl	8000490 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e78:	f7ff fb0a 	bl	8000490 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e026      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f0      	bne.n	8000e78 <HAL_RCC_OscConfig+0x498>
 8000e96:	e01e      	b.n	8000ed6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d107      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e019      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40007000 	.word	0x40007000
 8000eac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_RCC_OscConfig+0x500>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d106      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d001      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e0d0      	b.n	800109a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ef8:	4b6a      	ldr	r3, [pc, #424]	; (80010a4 <HAL_RCC_ClockConfig+0x1c0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d910      	bls.n	8000f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f06:	4b67      	ldr	r3, [pc, #412]	; (80010a4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f023 0207 	bic.w	r2, r3, #7
 8000f0e:	4965      	ldr	r1, [pc, #404]	; (80010a4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f16:	4b63      	ldr	r3, [pc, #396]	; (80010a4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d001      	beq.n	8000f28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0b8      	b.n	800109a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d020      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d005      	beq.n	8000f4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f40:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a58      	ldr	r2, [pc, #352]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f58:	4b53      	ldr	r3, [pc, #332]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4a52      	ldr	r2, [pc, #328]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f64:	4b50      	ldr	r3, [pc, #320]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	494d      	ldr	r1, [pc, #308]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d040      	beq.n	8001004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d107      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d115      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e07f      	b.n	800109a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d107      	bne.n	8000fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa2:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e073      	b.n	800109a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e06b      	b.n	800109a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fc2:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f023 0203 	bic.w	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4936      	ldr	r1, [pc, #216]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fd4:	f7ff fa5c 	bl	8000490 <HAL_GetTick>
 8000fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fda:	e00a      	b.n	8000ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fdc:	f7ff fa58 	bl	8000490 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e053      	b.n	800109a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 020c 	and.w	r2, r3, #12
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	429a      	cmp	r2, r3
 8001002:	d1eb      	bne.n	8000fdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d210      	bcs.n	8001034 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 0207 	bic.w	r2, r3, #7
 800101a:	4922      	ldr	r1, [pc, #136]	; (80010a4 <HAL_RCC_ClockConfig+0x1c0>)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d001      	beq.n	8001034 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e032      	b.n	800109a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	4916      	ldr	r1, [pc, #88]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 800104e:	4313      	orrs	r3, r2
 8001050:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d009      	beq.n	8001072 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	490e      	ldr	r1, [pc, #56]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	4313      	orrs	r3, r2
 8001070:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001072:	f000 f821 	bl	80010b8 <HAL_RCC_GetSysClockFreq>
 8001076:	4602      	mov	r2, r0
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_RCC_ClockConfig+0x1c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	490a      	ldr	r1, [pc, #40]	; (80010ac <HAL_RCC_ClockConfig+0x1c8>)
 8001084:	5ccb      	ldrb	r3, [r1, r3]
 8001086:	fa22 f303 	lsr.w	r3, r2, r3
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_RCC_ClockConfig+0x1cc>)
 800108c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f9ba 	bl	800040c <HAL_InitTick>

  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40022000 	.word	0x40022000
 80010a8:	40021000 	.word	0x40021000
 80010ac:	08001754 	.word	0x08001754
 80010b0:	20000004 	.word	0x20000004
 80010b4:	20000008 	.word	0x20000008

080010b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_RCC_GetSysClockFreq+0x94>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d002      	beq.n	80010e8 <HAL_RCC_GetSysClockFreq+0x30>
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d003      	beq.n	80010ee <HAL_RCC_GetSysClockFreq+0x36>
 80010e6:	e027      	b.n	8001138 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_RCC_GetSysClockFreq+0x98>)
 80010ea:	613b      	str	r3, [r7, #16]
      break;
 80010ec:	e027      	b.n	800113e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	0c9b      	lsrs	r3, r3, #18
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <HAL_RCC_GetSysClockFreq+0x9c>)
 80010f8:	5cd3      	ldrb	r3, [r2, r3]
 80010fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d010      	beq.n	8001128 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_RCC_GetSysClockFreq+0x94>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	0c5b      	lsrs	r3, r3, #17
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <HAL_RCC_GetSysClockFreq+0x98>)
 800111a:	fb03 f202 	mul.w	r2, r3, r2
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	fbb2 f3f3 	udiv	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e004      	b.n	8001132 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a0c      	ldr	r2, [pc, #48]	; (800115c <HAL_RCC_GetSysClockFreq+0xa4>)
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	613b      	str	r3, [r7, #16]
      break;
 8001136:	e002      	b.n	800113e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_RCC_GetSysClockFreq+0x98>)
 800113a:	613b      	str	r3, [r7, #16]
      break;
 800113c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800113e:	693b      	ldr	r3, [r7, #16]
}
 8001140:	4618      	mov	r0, r3
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	007a1200 	.word	0x007a1200
 8001154:	0800176c 	.word	0x0800176c
 8001158:	0800177c 	.word	0x0800177c
 800115c:	003d0900 	.word	0x003d0900

08001160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <HAL_RCC_GetHCLKFreq+0x10>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	20000004 	.word	0x20000004

08001174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001178:	f7ff fff2 	bl	8001160 <HAL_RCC_GetHCLKFreq>
 800117c:	4602      	mov	r2, r0
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	4903      	ldr	r1, [pc, #12]	; (8001198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800118a:	5ccb      	ldrb	r3, [r1, r3]
 800118c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	08001764 	.word	0x08001764

0800119c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011a0:	f7ff ffde 	bl	8001160 <HAL_RCC_GetHCLKFreq>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	0adb      	lsrs	r3, r3, #11
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	4903      	ldr	r1, [pc, #12]	; (80011c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011b2:	5ccb      	ldrb	r3, [r1, r3]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	08001764 	.word	0x08001764

080011c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <RCC_Delay+0x34>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <RCC_Delay+0x38>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0a5b      	lsrs	r3, r3, #9
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011e0:	bf00      	nop
  }
  while (Delay --);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1e5a      	subs	r2, r3, #1
 80011e6:	60fa      	str	r2, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f9      	bne.n	80011e0 <RCC_Delay+0x1c>
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	20000004 	.word	0x20000004
 80011fc:	10624dd3 	.word	0x10624dd3

08001200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e042      	b.n	8001298 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d106      	bne.n	800122c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff f86c 	bl	8000304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2224      	movs	r2, #36	; 0x24
 8001230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f9af 	bl	80015a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	695a      	ldr	r2, [r3, #20]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2220      	movs	r2, #32
 8001284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2220      	movs	r2, #32
 800128c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b20      	cmp	r3, #32
 80012be:	d16d      	bne.n	800139c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <HAL_UART_Transmit+0x2c>
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e066      	b.n	800139e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2221      	movs	r2, #33	; 0x21
 80012da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80012de:	f7ff f8d7 	bl	8000490 <HAL_GetTick>
 80012e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	88fa      	ldrh	r2, [r7, #6]
 80012e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f8:	d108      	bne.n	800130c <HAL_UART_Transmit+0x6c>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d104      	bne.n	800130c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	e003      	b.n	8001314 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001314:	e02a      	b.n	800136c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2200      	movs	r2, #0
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 f8d2 	bl	80014ca <UART_WaitOnFlagUntilTimeout>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e036      	b.n	800139e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10b      	bne.n	800134e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	3302      	adds	r3, #2
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	e007      	b.n	800135e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	3301      	adds	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001362:	b29b      	uxth	r3, r3
 8001364:	3b01      	subs	r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001370:	b29b      	uxth	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1cf      	bne.n	8001316 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2200      	movs	r2, #0
 800137e:	2140      	movs	r1, #64	; 0x40
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 f8a2 	bl	80014ca <UART_WaitOnFlagUntilTimeout>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e006      	b.n	800139e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2220      	movs	r2, #32
 8001394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	e000      	b.n	800139e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800139c:	2302      	movs	r3, #2
  }
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3720      	adds	r7, #32
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b08a      	sub	sp, #40	; 0x28
 80013aa:	af02      	add	r7, sp, #8
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4613      	mov	r3, r2
 80013b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d17c      	bne.n	80014c0 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_UART_Receive+0x2c>
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e075      	b.n	80014c2 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2222      	movs	r2, #34	; 0x22
 80013e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80013ea:	f7ff f851 	bl	8000490 <HAL_GetTick>
 80013ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	88fa      	ldrh	r2, [r7, #6]
 80013fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001404:	d108      	bne.n	8001418 <HAL_UART_Receive+0x72>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d104      	bne.n	8001418 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	e003      	b.n	8001420 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001420:	e043      	b.n	80014aa <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2200      	movs	r2, #0
 800142a:	2120      	movs	r1, #32
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 f84c 	bl	80014ca <UART_WaitOnFlagUntilTimeout>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e042      	b.n	80014c2 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	b29b      	uxth	r3, r3
 800144a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800144e:	b29a      	uxth	r2, r3
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	3302      	adds	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	e01f      	b.n	800149c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001464:	d007      	beq.n	8001476 <HAL_UART_Receive+0xd0>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10a      	bne.n	8001484 <HAL_UART_Receive+0xde>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e008      	b.n	8001496 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001490:	b2da      	uxtb	r2, r3
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1b6      	bne.n	8001422 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	e000      	b.n	80014c2 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80014c0:	2302      	movs	r3, #2
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b090      	sub	sp, #64	; 0x40
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014da:	e050      	b.n	800157e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e2:	d04c      	beq.n	800157e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <UART_WaitOnFlagUntilTimeout+0x30>
 80014ea:	f7fe ffd1 	bl	8000490 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d241      	bcs.n	800157e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	330c      	adds	r3, #12
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001504:	e853 3f00 	ldrex	r3, [r3]
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	330c      	adds	r3, #12
 8001518:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800151a:	637a      	str	r2, [r7, #52]	; 0x34
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800151e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001522:	e841 2300 	strex	r3, r2, [r1]
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1e5      	bne.n	80014fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3314      	adds	r3, #20
 8001534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	e853 3f00 	ldrex	r3, [r3]
 800153c:	613b      	str	r3, [r7, #16]
   return(result);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3314      	adds	r3, #20
 800154c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800154e:	623a      	str	r2, [r7, #32]
 8001550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001552:	69f9      	ldr	r1, [r7, #28]
 8001554:	6a3a      	ldr	r2, [r7, #32]
 8001556:	e841 2300 	strex	r3, r2, [r1]
 800155a:	61bb      	str	r3, [r7, #24]
   return(result);
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e5      	bne.n	800152e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2220      	movs	r2, #32
 8001566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2220      	movs	r2, #32
 800156e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e00f      	b.n	800159e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4013      	ands	r3, r2
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	429a      	cmp	r2, r3
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	429a      	cmp	r2, r3
 800159a:	d09f      	beq.n	80014dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3740      	adds	r7, #64	; 0x40
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015e2:	f023 030c 	bic.w	r3, r3, #12
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2c      	ldr	r2, [pc, #176]	; (80016bc <UART_SetConfig+0x114>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d103      	bne.n	8001618 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001610:	f7ff fdc4 	bl	800119c <HAL_RCC_GetPCLK2Freq>
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	e002      	b.n	800161e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001618:	f7ff fdac 	bl	8001174 <HAL_RCC_GetPCLK1Freq>
 800161c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	009a      	lsls	r2, r3, #2
 8001628:	441a      	add	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <UART_SetConfig+0x118>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	0119      	lsls	r1, r3, #4
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009a      	lsls	r2, r3, #2
 8001648:	441a      	add	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fbb2 f2f3 	udiv	r2, r2, r3
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <UART_SetConfig+0x118>)
 8001656:	fba3 0302 	umull	r0, r3, r3, r2
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	2064      	movs	r0, #100	; 0x64
 800165e:	fb00 f303 	mul.w	r3, r0, r3
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	3332      	adds	r3, #50	; 0x32
 8001668:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <UART_SetConfig+0x118>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001674:	4419      	add	r1, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009a      	lsls	r2, r3, #2
 8001680:	441a      	add	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	fbb2 f2f3 	udiv	r2, r2, r3
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <UART_SetConfig+0x118>)
 800168e:	fba3 0302 	umull	r0, r3, r3, r2
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2064      	movs	r0, #100	; 0x64
 8001696:	fb00 f303 	mul.w	r3, r0, r3
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	3332      	adds	r3, #50	; 0x32
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <UART_SetConfig+0x118>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	f003 020f 	and.w	r2, r3, #15
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	440a      	add	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013800 	.word	0x40013800
 80016c0:	51eb851f 	.word	0x51eb851f

080016c4 <__libc_init_array>:
 80016c4:	b570      	push	{r4, r5, r6, lr}
 80016c6:	2600      	movs	r6, #0
 80016c8:	4d0c      	ldr	r5, [pc, #48]	; (80016fc <__libc_init_array+0x38>)
 80016ca:	4c0d      	ldr	r4, [pc, #52]	; (8001700 <__libc_init_array+0x3c>)
 80016cc:	1b64      	subs	r4, r4, r5
 80016ce:	10a4      	asrs	r4, r4, #2
 80016d0:	42a6      	cmp	r6, r4
 80016d2:	d109      	bne.n	80016e8 <__libc_init_array+0x24>
 80016d4:	f000 f822 	bl	800171c <_init>
 80016d8:	2600      	movs	r6, #0
 80016da:	4d0a      	ldr	r5, [pc, #40]	; (8001704 <__libc_init_array+0x40>)
 80016dc:	4c0a      	ldr	r4, [pc, #40]	; (8001708 <__libc_init_array+0x44>)
 80016de:	1b64      	subs	r4, r4, r5
 80016e0:	10a4      	asrs	r4, r4, #2
 80016e2:	42a6      	cmp	r6, r4
 80016e4:	d105      	bne.n	80016f2 <__libc_init_array+0x2e>
 80016e6:	bd70      	pop	{r4, r5, r6, pc}
 80016e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80016ec:	4798      	blx	r3
 80016ee:	3601      	adds	r6, #1
 80016f0:	e7ee      	b.n	80016d0 <__libc_init_array+0xc>
 80016f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f6:	4798      	blx	r3
 80016f8:	3601      	adds	r6, #1
 80016fa:	e7f2      	b.n	80016e2 <__libc_init_array+0x1e>
 80016fc:	08001780 	.word	0x08001780
 8001700:	08001780 	.word	0x08001780
 8001704:	08001780 	.word	0x08001780
 8001708:	08001784 	.word	0x08001784

0800170c <memset>:
 800170c:	4603      	mov	r3, r0
 800170e:	4402      	add	r2, r0
 8001710:	4293      	cmp	r3, r2
 8001712:	d100      	bne.n	8001716 <memset+0xa>
 8001714:	4770      	bx	lr
 8001716:	f803 1b01 	strb.w	r1, [r3], #1
 800171a:	e7f9      	b.n	8001710 <memset+0x4>

0800171c <_init>:
 800171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171e:	bf00      	nop
 8001720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001722:	bc08      	pop	{r3}
 8001724:	469e      	mov	lr, r3
 8001726:	4770      	bx	lr

08001728 <_fini>:
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	bf00      	nop
 800172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172e:	bc08      	pop	{r3}
 8001730:	469e      	mov	lr, r3
 8001732:	4770      	bx	lr
