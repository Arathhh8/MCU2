
UART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000038c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000498  08000498  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000498  08000498  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000498  08000498  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000498  08000498  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000498  08000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800049c  0800049c  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080004a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  080004ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004ac  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000181e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007aa  00000000  00000000  00021853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00022000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000220  00000000  00000000  00022278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014bfa  00000000  00000000  00022498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000276d  00000000  00000000  00037092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ced0  00000000  00000000  000397ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b66cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000858  00000000  00000000  000b6720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000480 	.word	0x08000480

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000480 	.word	0x08000480

0800014c <main>:
#include"stm32f1xx_hal.h"
#include "main_app.h"

void SystemClockConfig(void);

int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000150:	f000 f848 	bl	80001e4 <HAL_Init>
	SystemClockConfig();
 8000154:	f000 f803 	bl	800015e <SystemClockConfig>

	return 0;
 8000158:	2300      	movs	r3, #0
}
 800015a:	4618      	mov	r0, r3
 800015c:	bd80      	pop	{r7, pc}

0800015e <SystemClockConfig>:

void SystemClockConfig(void){
 800015e:	b480      	push	{r7}
 8000160:	af00      	add	r7, sp, #0


}
 8000162:	bf00      	nop
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
	...

0800016c <HAL_MspInit>:
 */

#include "stm32f1xx_hal.h"

void HAL_MspInit(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
  // Here we will do low level processor specific initis

	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); // this is actually no required because this config is by default
 8000170:	2003      	movs	r0, #3
 8000172:	f000 f92d 	bl	80003d0 <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; // enable usage fault, memory fault and bus fault system exeptions
 8000176:	4b04      	ldr	r3, [pc, #16]	; (8000188 <HAL_MspInit+0x1c>)
 8000178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800017a:	4a03      	ldr	r2, [pc, #12]	; (8000188 <HAL_MspInit+0x1c>)
 800017c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000180:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions

}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	e000ed00 	.word	0xe000ed00

0800018c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000198:	f7ff fff8 	bl	800018c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800019c:	480b      	ldr	r0, [pc, #44]	; (80001cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800019e:	490c      	ldr	r1, [pc, #48]	; (80001d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80001a0:	4a0c      	ldr	r2, [pc, #48]	; (80001d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80001a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001a4:	e002      	b.n	80001ac <LoopCopyDataInit>

080001a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001aa:	3304      	adds	r3, #4

080001ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001b0:	d3f9      	bcc.n	80001a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001b2:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80001b4:	4c09      	ldr	r4, [pc, #36]	; (80001dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80001b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001b8:	e001      	b.n	80001be <LoopFillZerobss>

080001ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001bc:	3204      	adds	r2, #4

080001be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001c0:	d3fb      	bcc.n	80001ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80001c2:	f000 f939 	bl	8000438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001c6:	f7ff ffc1 	bl	800014c <main>
  bx lr
 80001ca:	4770      	bx	lr
  ldr r0, =_sdata
 80001cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80001d4:	080004a0 	.word	0x080004a0
  ldr r2, =_sbss
 80001d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80001dc:	20000028 	.word	0x20000028

080001e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001e0:	e7fe      	b.n	80001e0 <ADC1_2_IRQHandler>
	...

080001e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <HAL_Init+0x28>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <HAL_Init+0x28>)
 80001ee:	f043 0310 	orr.w	r3, r3, #16
 80001f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f4:	2003      	movs	r0, #3
 80001f6:	f000 f8eb 	bl	80003d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001fa:	200f      	movs	r0, #15
 80001fc:	f000 f808 	bl	8000210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000200:	f7ff ffb4 	bl	800016c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000204:	2300      	movs	r3, #0
}
 8000206:	4618      	mov	r0, r3
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40022000 	.word	0x40022000

08000210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <HAL_InitTick+0x54>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	4b12      	ldr	r3, [pc, #72]	; (8000268 <HAL_InitTick+0x58>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	fbb3 f3f1 	udiv	r3, r3, r1
 800022a:	fbb2 f3f3 	udiv	r3, r2, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f8f5 	bl	800041e <HAL_SYSTICK_Config>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800023a:	2301      	movs	r3, #1
 800023c:	e00e      	b.n	800025c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b0f      	cmp	r3, #15
 8000242:	d80a      	bhi.n	800025a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000244:	2200      	movs	r2, #0
 8000246:	6879      	ldr	r1, [r7, #4]
 8000248:	f04f 30ff 	mov.w	r0, #4294967295
 800024c:	f000 f8cb 	bl	80003e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000250:	4a06      	ldr	r2, [pc, #24]	; (800026c <HAL_InitTick+0x5c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000256:	2300      	movs	r3, #0
 8000258:	e000      	b.n	800025c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800025a:	2301      	movs	r3, #1
}
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000000 	.word	0x20000000
 8000268:	20000008 	.word	0x20000008
 800026c:	20000004 	.word	0x20000004

08000270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f003 0307 	and.w	r3, r3, #7
 800027e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800028c:	4013      	ands	r3, r2
 800028e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800029c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002a2:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <__NVIC_SetPriorityGrouping+0x44>)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	60d3      	str	r3, [r2, #12]
}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <__NVIC_GetPriorityGrouping+0x18>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	0a1b      	lsrs	r3, r3, #8
 80002c2:	f003 0307 	and.w	r3, r3, #7
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	6039      	str	r1, [r7, #0]
 80002de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	db0a      	blt.n	80002fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	490c      	ldr	r1, [pc, #48]	; (8000320 <__NVIC_SetPriority+0x4c>)
 80002ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f2:	0112      	lsls	r2, r2, #4
 80002f4:	b2d2      	uxtb	r2, r2
 80002f6:	440b      	add	r3, r1
 80002f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002fc:	e00a      	b.n	8000314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4908      	ldr	r1, [pc, #32]	; (8000324 <__NVIC_SetPriority+0x50>)
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	f003 030f 	and.w	r3, r3, #15
 800030a:	3b04      	subs	r3, #4
 800030c:	0112      	lsls	r2, r2, #4
 800030e:	b2d2      	uxtb	r2, r2
 8000310:	440b      	add	r3, r1
 8000312:	761a      	strb	r2, [r3, #24]
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000e100 	.word	0xe000e100
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000328:	b480      	push	{r7}
 800032a:	b089      	sub	sp, #36	; 0x24
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	f1c3 0307 	rsb	r3, r3, #7
 8000342:	2b04      	cmp	r3, #4
 8000344:	bf28      	it	cs
 8000346:	2304      	movcs	r3, #4
 8000348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	3304      	adds	r3, #4
 800034e:	2b06      	cmp	r3, #6
 8000350:	d902      	bls.n	8000358 <NVIC_EncodePriority+0x30>
 8000352:	69fb      	ldr	r3, [r7, #28]
 8000354:	3b03      	subs	r3, #3
 8000356:	e000      	b.n	800035a <NVIC_EncodePriority+0x32>
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800035c:	f04f 32ff 	mov.w	r2, #4294967295
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	fa02 f303 	lsl.w	r3, r2, r3
 8000366:	43da      	mvns	r2, r3
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	401a      	ands	r2, r3
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000370:	f04f 31ff 	mov.w	r1, #4294967295
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	fa01 f303 	lsl.w	r3, r1, r3
 800037a:	43d9      	mvns	r1, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000380:	4313      	orrs	r3, r2
         );
}
 8000382:	4618      	mov	r0, r3
 8000384:	3724      	adds	r7, #36	; 0x24
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3b01      	subs	r3, #1
 8000398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800039c:	d301      	bcc.n	80003a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800039e:	2301      	movs	r3, #1
 80003a0:	e00f      	b.n	80003c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <SysTick_Config+0x40>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003aa:	210f      	movs	r1, #15
 80003ac:	f04f 30ff 	mov.w	r0, #4294967295
 80003b0:	f7ff ff90 	bl	80002d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <SysTick_Config+0x40>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <SysTick_Config+0x40>)
 80003bc:	2207      	movs	r2, #7
 80003be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003c0:	2300      	movs	r3, #0
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	e000e010 	.word	0xe000e010

080003d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f7ff ff49 	bl	8000270 <__NVIC_SetPriorityGrouping>
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b086      	sub	sp, #24
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	4603      	mov	r3, r0
 80003ee:	60b9      	str	r1, [r7, #8]
 80003f0:	607a      	str	r2, [r7, #4]
 80003f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003f8:	f7ff ff5e 	bl	80002b8 <__NVIC_GetPriorityGrouping>
 80003fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	68b9      	ldr	r1, [r7, #8]
 8000402:	6978      	ldr	r0, [r7, #20]
 8000404:	f7ff ff90 	bl	8000328 <NVIC_EncodePriority>
 8000408:	4602      	mov	r2, r0
 800040a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff5f 	bl	80002d4 <__NVIC_SetPriority>
}
 8000416:	bf00      	nop
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b082      	sub	sp, #8
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f7ff ffb0 	bl	800038c <SysTick_Config>
 800042c:	4603      	mov	r3, r0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <__libc_init_array>:
 8000438:	b570      	push	{r4, r5, r6, lr}
 800043a:	2600      	movs	r6, #0
 800043c:	4d0c      	ldr	r5, [pc, #48]	; (8000470 <__libc_init_array+0x38>)
 800043e:	4c0d      	ldr	r4, [pc, #52]	; (8000474 <__libc_init_array+0x3c>)
 8000440:	1b64      	subs	r4, r4, r5
 8000442:	10a4      	asrs	r4, r4, #2
 8000444:	42a6      	cmp	r6, r4
 8000446:	d109      	bne.n	800045c <__libc_init_array+0x24>
 8000448:	f000 f81a 	bl	8000480 <_init>
 800044c:	2600      	movs	r6, #0
 800044e:	4d0a      	ldr	r5, [pc, #40]	; (8000478 <__libc_init_array+0x40>)
 8000450:	4c0a      	ldr	r4, [pc, #40]	; (800047c <__libc_init_array+0x44>)
 8000452:	1b64      	subs	r4, r4, r5
 8000454:	10a4      	asrs	r4, r4, #2
 8000456:	42a6      	cmp	r6, r4
 8000458:	d105      	bne.n	8000466 <__libc_init_array+0x2e>
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000460:	4798      	blx	r3
 8000462:	3601      	adds	r6, #1
 8000464:	e7ee      	b.n	8000444 <__libc_init_array+0xc>
 8000466:	f855 3b04 	ldr.w	r3, [r5], #4
 800046a:	4798      	blx	r3
 800046c:	3601      	adds	r6, #1
 800046e:	e7f2      	b.n	8000456 <__libc_init_array+0x1e>
 8000470:	08000498 	.word	0x08000498
 8000474:	08000498 	.word	0x08000498
 8000478:	08000498 	.word	0x08000498
 800047c:	0800049c 	.word	0x0800049c

08000480 <_init>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	bf00      	nop
 8000484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000486:	bc08      	pop	{r3}
 8000488:	469e      	mov	lr, r3
 800048a:	4770      	bx	lr

0800048c <_fini>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	bf00      	nop
 8000490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000492:	bc08      	pop	{r3}
 8000494:	469e      	mov	lr, r3
 8000496:	4770      	bx	lr
