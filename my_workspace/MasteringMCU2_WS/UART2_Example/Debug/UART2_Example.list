
UART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000378  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000484  08000484  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000484  08000484  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000484  08000484  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000484  08000484  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000484  08000484  00010484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800048c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000498  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000498  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015ce  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000709  00000000  00000000  00021603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00021d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000220  00000000  00000000  00021f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014a7d  00000000  00000000  000221a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000218b  00000000  00000000  00036c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ced0  00000000  00000000  00038db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5c80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000085c  00000000  00000000  000b5cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800046c 	.word	0x0800046c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800046c 	.word	0x0800046c

0800014c <main>:
#include"stm32f1xx_hal.h"
#include "main_app.h"

void SystemClockConfig(void);

int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000150:	f000 f83e 	bl	80001d0 <HAL_Init>
	SystemClockConfig();
 8000154:	f000 f803 	bl	800015e <SystemClockConfig>

	return 0;
 8000158:	2300      	movs	r3, #0
}
 800015a:	4618      	mov	r0, r3
 800015c:	bd80      	pop	{r7, pc}

0800015e <SystemClockConfig>:

void SystemClockConfig(void){
 800015e:	b480      	push	{r7}
 8000160:	af00      	add	r7, sp, #0


}
 8000162:	bf00      	nop
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <HAL_MspInit>:
 *      Author: arath
 */


void HAL_MspInit(void)
{
 800016a:	b480      	push	{r7}
 800016c:	af00      	add	r7, sp, #0
	// 1. Set up the priority grouping of the arm cortex mx processor

	// 2. Enable the required system exceptions of the arm cortex mx processor

	// 3. Configure the priority for the system exceptions
}
 800016e:	bf00      	nop
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr

08000176 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000176:	b480      	push	{r7}
 8000178:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
	...

08000184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000184:	f7ff fff7 	bl	8000176 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000188:	480b      	ldr	r0, [pc, #44]	; (80001b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800018a:	490c      	ldr	r1, [pc, #48]	; (80001bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800018c:	4a0c      	ldr	r2, [pc, #48]	; (80001c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800018e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000190:	e002      	b.n	8000198 <LoopCopyDataInit>

08000192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000196:	3304      	adds	r3, #4

08000198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800019a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800019c:	d3f9      	bcc.n	8000192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800019e:	4a09      	ldr	r2, [pc, #36]	; (80001c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80001a0:	4c09      	ldr	r4, [pc, #36]	; (80001c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80001a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001a4:	e001      	b.n	80001aa <LoopFillZerobss>

080001a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a8:	3204      	adds	r2, #4

080001aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001ac:	d3fb      	bcc.n	80001a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80001ae:	f000 f939 	bl	8000424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001b2:	f7ff ffcb 	bl	800014c <main>
  bx lr
 80001b6:	4770      	bx	lr
  ldr r0, =_sdata
 80001b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80001c0:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 80001c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80001c8:	20000028 	.word	0x20000028

080001cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001cc:	e7fe      	b.n	80001cc <ADC1_2_IRQHandler>
	...

080001d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_Init+0x28>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <HAL_Init+0x28>)
 80001da:	f043 0310 	orr.w	r3, r3, #16
 80001de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e0:	2003      	movs	r0, #3
 80001e2:	f000 f8eb 	bl	80003bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001e6:	200f      	movs	r0, #15
 80001e8:	f000 f808 	bl	80001fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001ec:	f7ff ffbd 	bl	800016a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f0:	2300      	movs	r3, #0
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40022000 	.word	0x40022000

080001fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000204:	4b12      	ldr	r3, [pc, #72]	; (8000250 <HAL_InitTick+0x54>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <HAL_InitTick+0x58>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	4619      	mov	r1, r3
 800020e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000212:	fbb3 f3f1 	udiv	r3, r3, r1
 8000216:	fbb2 f3f3 	udiv	r3, r2, r3
 800021a:	4618      	mov	r0, r3
 800021c:	f000 f8f5 	bl	800040a <HAL_SYSTICK_Config>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000226:	2301      	movs	r3, #1
 8000228:	e00e      	b.n	8000248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b0f      	cmp	r3, #15
 800022e:	d80a      	bhi.n	8000246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000230:	2200      	movs	r2, #0
 8000232:	6879      	ldr	r1, [r7, #4]
 8000234:	f04f 30ff 	mov.w	r0, #4294967295
 8000238:	f000 f8cb 	bl	80003d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800023c:	4a06      	ldr	r2, [pc, #24]	; (8000258 <HAL_InitTick+0x5c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000242:	2300      	movs	r3, #0
 8000244:	e000      	b.n	8000248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008
 8000258:	20000004 	.word	0x20000004

0800025c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f003 0307 	and.w	r3, r3, #7
 800026a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <__NVIC_SetPriorityGrouping+0x44>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000272:	68ba      	ldr	r2, [r7, #8]
 8000274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000278:	4013      	ands	r3, r2
 800027a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800028c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800028e:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	60d3      	str	r3, [r2, #12]
}
 8000294:	bf00      	nop
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_GetPriorityGrouping+0x18>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	f003 0307 	and.w	r3, r3, #7
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	db0a      	blt.n	80002ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	490c      	ldr	r1, [pc, #48]	; (800030c <__NVIC_SetPriority+0x4c>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	0112      	lsls	r2, r2, #4
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	440b      	add	r3, r1
 80002e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e8:	e00a      	b.n	8000300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4908      	ldr	r1, [pc, #32]	; (8000310 <__NVIC_SetPriority+0x50>)
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	3b04      	subs	r3, #4
 80002f8:	0112      	lsls	r2, r2, #4
 80002fa:	b2d2      	uxtb	r2, r2
 80002fc:	440b      	add	r3, r1
 80002fe:	761a      	strb	r2, [r3, #24]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000e100 	.word	0xe000e100
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000314:	b480      	push	{r7}
 8000316:	b089      	sub	sp, #36	; 0x24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	f1c3 0307 	rsb	r3, r3, #7
 800032e:	2b04      	cmp	r3, #4
 8000330:	bf28      	it	cs
 8000332:	2304      	movcs	r3, #4
 8000334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3304      	adds	r3, #4
 800033a:	2b06      	cmp	r3, #6
 800033c:	d902      	bls.n	8000344 <NVIC_EncodePriority+0x30>
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3b03      	subs	r3, #3
 8000342:	e000      	b.n	8000346 <NVIC_EncodePriority+0x32>
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000348:	f04f 32ff 	mov.w	r2, #4294967295
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	fa02 f303 	lsl.w	r3, r2, r3
 8000352:	43da      	mvns	r2, r3
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	401a      	ands	r2, r3
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800035c:	f04f 31ff 	mov.w	r1, #4294967295
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	fa01 f303 	lsl.w	r3, r1, r3
 8000366:	43d9      	mvns	r1, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036c:	4313      	orrs	r3, r2
         );
}
 800036e:	4618      	mov	r0, r3
 8000370:	3724      	adds	r7, #36	; 0x24
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3b01      	subs	r3, #1
 8000384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000388:	d301      	bcc.n	800038e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800038a:	2301      	movs	r3, #1
 800038c:	e00f      	b.n	80003ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800038e:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <SysTick_Config+0x40>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000396:	210f      	movs	r1, #15
 8000398:	f04f 30ff 	mov.w	r0, #4294967295
 800039c:	f7ff ff90 	bl	80002c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <SysTick_Config+0x40>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003a6:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <SysTick_Config+0x40>)
 80003a8:	2207      	movs	r2, #7
 80003aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003ac:	2300      	movs	r3, #0
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	e000e010 	.word	0xe000e010

080003bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ff49 	bl	800025c <__NVIC_SetPriorityGrouping>
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b086      	sub	sp, #24
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	4603      	mov	r3, r0
 80003da:	60b9      	str	r1, [r7, #8]
 80003dc:	607a      	str	r2, [r7, #4]
 80003de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003e4:	f7ff ff5e 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 80003e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	68b9      	ldr	r1, [r7, #8]
 80003ee:	6978      	ldr	r0, [r7, #20]
 80003f0:	f7ff ff90 	bl	8000314 <NVIC_EncodePriority>
 80003f4:	4602      	mov	r2, r0
 80003f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003fa:	4611      	mov	r1, r2
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff5f 	bl	80002c0 <__NVIC_SetPriority>
}
 8000402:	bf00      	nop
 8000404:	3718      	adds	r7, #24
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ffb0 	bl	8000378 <SysTick_Config>
 8000418:	4603      	mov	r3, r0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <__libc_init_array>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	2600      	movs	r6, #0
 8000428:	4d0c      	ldr	r5, [pc, #48]	; (800045c <__libc_init_array+0x38>)
 800042a:	4c0d      	ldr	r4, [pc, #52]	; (8000460 <__libc_init_array+0x3c>)
 800042c:	1b64      	subs	r4, r4, r5
 800042e:	10a4      	asrs	r4, r4, #2
 8000430:	42a6      	cmp	r6, r4
 8000432:	d109      	bne.n	8000448 <__libc_init_array+0x24>
 8000434:	f000 f81a 	bl	800046c <_init>
 8000438:	2600      	movs	r6, #0
 800043a:	4d0a      	ldr	r5, [pc, #40]	; (8000464 <__libc_init_array+0x40>)
 800043c:	4c0a      	ldr	r4, [pc, #40]	; (8000468 <__libc_init_array+0x44>)
 800043e:	1b64      	subs	r4, r4, r5
 8000440:	10a4      	asrs	r4, r4, #2
 8000442:	42a6      	cmp	r6, r4
 8000444:	d105      	bne.n	8000452 <__libc_init_array+0x2e>
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	f855 3b04 	ldr.w	r3, [r5], #4
 800044c:	4798      	blx	r3
 800044e:	3601      	adds	r6, #1
 8000450:	e7ee      	b.n	8000430 <__libc_init_array+0xc>
 8000452:	f855 3b04 	ldr.w	r3, [r5], #4
 8000456:	4798      	blx	r3
 8000458:	3601      	adds	r6, #1
 800045a:	e7f2      	b.n	8000442 <__libc_init_array+0x1e>
 800045c:	08000484 	.word	0x08000484
 8000460:	08000484 	.word	0x08000484
 8000464:	08000484 	.word	0x08000484
 8000468:	08000488 	.word	0x08000488

0800046c <_init>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

08000478 <_fini>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr
